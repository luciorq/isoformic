[{"path":"https://luciorq.github.io/isoformic/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 isoformic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"the-isoformic-method","dir":"Articles","previous_headings":"","what":"The Isoformic method","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Welcome isoformic, workflow isoform-level biological interpretation transcriptomic data.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"information","dir":"Articles","previous_headings":"The Isoformic method","what":"Information","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"data used examples extracted paper: “Landscape Dysregulated Placental RNA Editing Associated Preeclampsia” analyzed generated RNA-Seq datasets preeclamptic control placentas. dataset chosen due many biological replicates high sequencing depth. tutorial encompass X different steps divided X unities type analysis want perform.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"dependencies","dir":"Articles","previous_headings":"The Isoformic method","what":"Dependencies","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"NOTE: 2024-06-08 version Workflow described vignette maintained. installing v0.0.1 package run workflow use: Load dependency packages","code":"if (requireNamespace(remotes, quietly = TRUE)) {   remotes::install_github(\"luciorq/isoformic@v0.0.1\") } library(isoformic) library(fs) library(readr) library(dplyr) library(tidyr) library(stringr) # library(SummarizedExperiment) # library(tximeta) # library(fishpond)"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"initial-considerations","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Initial Considerations","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"highly recommend use Salmon transcript-level abundance estimation swish method implemented fishpond R package isoform-level differential expression. GENCODE project offers good annotation isoforms human mouse genomes, including isoforms non-coding genes. Using sources annotation can render completely different results following analysis.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"part-1-data-input","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 1: Data input","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"version need two essential input two optional inputs. Essential input 1: transcript differential expression table. table can outputted kind differential expression software use needs contain 1) information Transcript name Ensembl Transcript ID per line 2) log2FoldChange information column named “log2FoldChange”. 3) p-value information column named “pvalue”. columns table used main analysis. DET table UNFILTERED version table. Example: Essential input 2: FASTA file GENCODE corresponds fasta used transcriptome alignment. need version since use names GENCODE version mergings. annotation used also need GENCODE since posses transcript_type column used information well. wish CAN provide information external source GENCODE, need table least three columns: 1)transcript_name column needs match gene names DET table TPM table, 2) gene-name column tell gene transcripts belong 3) transcript_type column. table also use transcript names GENCODE column stating transcript biotype also got GENCODE annotation. statistics can ‘pvalue’, ‘svalue’ ‘qvalue’ ‘log2FoldChange’ case control conditions also needed plots. Optional inputs: 1) Transcript per million (TPM) table matching transcripts differential expression table 2) GFF3 file transcriptome version corresponds FASTA 3) table differentially expressed genes data also use comparison. differential expression table can used pipeline authors, multiple testing, reached conclusion swish implementation differential transcript expression analysis using inferential replicate counts Salmon one performs best medium high depth transcriptome libraries looking number transcripts significant values. well annotated transcriptomes output results tests mentioned done using human data. Isoformic makes available example files can used model formatting necessary files running workflow. files can found following path. files available can seen : load table points libraries represent cases (treatment) controls. library, cases pregnant woman Preeclampsia controls matched pregnant without Preeclampsia.","code":"path_package(\"isoformic\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic PE1_DETs <- read_csv(path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\")) head(PE1_DETs) ## # A tibble: 6 × 4 ##   transcript_id      log2FC  pvalue qvalue ##   <chr>               <dbl>   <dbl>  <dbl> ## 1 ENST00000456328.2 -0.692  0.0199  0.0940 ## 2 ENST00000488147.1  0.0731 0.652   0.812  ## 3 ENST00000466430.5 -0.146  0.364   0.590  ## 4 ENST00000442987.3 -0.183  0.0841  0.242  ## 5 ENST00000494149.2 -0.728  0.00599 0.0420 ## 6 ENST00000595919.1 -0.0789 0.951   0.977 path_package(\"isoformic\", \"extdata\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata path_package(\"isoformic\", \"extdata\") |>   dir_ls() ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/DEGs_PE_fixed2.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/DETs_fixed.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/PE_1_DETs.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/PE_1_counts.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/hsapiens_REAC_subset.gmt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/isoformic-logo.png PE1_DETs <- path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\") |>   read_csv() PE1_DEGs <- path_package(\"isoformic\", \"extdata\", \"DEGs_PE_fixed2.csv\") |>   read_csv() PE1_counts <- path_package(\"isoformic\", \"extdata\", \"PE_1_counts.csv\") |>   read_csv() |>   dplyr::rename(transcript_id = ...1) sample_table <- data.frame(   samples = colnames(PE1_counts)[2:ncol(PE1_counts)],   condition = c(rep(\"treatment\", 8), rep(\"control\", ncol(PE1_counts) - 9)) ) head(sample_table) ##       samples condition ## 1 SRR11498039 treatment ## 2 SRR11498040 treatment ## 3 SRR11498041 treatment ## 4 SRR11498042 treatment ## 5 SRR11498043 treatment ## 6 SRR11498044 treatment"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"download-reference-files","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data > Part 1: Data input","what":"Download reference files","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"references used project obtained GENCODE Project version 34 Human genome annotation. annotation file GFF3 format obtained https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_34/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz. step may take depending speed internet connection","code":"download_reference(version = \"34\", file_type = \"fasta\") ## [1] \"data-raw/gencode.v34.transcripts.fa.gz\" download_reference(version = \"34\", file_type = \"gff\") ## [1] \"data-raw/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz\" # download_reference(version = \"34\", file_type = \"gtf\")"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"part-2-transcript-to-gene-and-gene-to-transcript-reference-tables","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 2: Transcript to Gene and Gene to transcript reference tables","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Using FASTA file GENCODE construct transcript per gene dictionary table add information main DEG, DET TPM table. step depend lot names columns tables Vignette decided change names keep consistency. input used FASTA file containing transcript sequences annotation information downloaded GENCODE website specific version used alignment. case GENCODE v34. header shows imported table still weird tidy, pass make_tx_to_gene function make tidy ready use. Now tx_to_gene table 6 columns order: Ensembl transcript id, Ensembl gene id, Havanna gene id, Havanna transcript id, transcript name, gene name, entrez gene number transcript type. DEG, DET TPM table need Ensembl gene id, Gene name transcript type information can convert tables transcript_name add type information gene DE DET table. Select columns gene id gene name info First add gene_name information DEG table Now transcript name TPM table DET table main table analysis.","code":"fasta_path <- \"data-raw/gencode.v34.transcripts.fa.gz\" read_lines(fasta_path, n_max = 5) ## [1] \">ENST00000456328.2|ENSG00000223972.5|OTTHUMG00000000961.2|OTTHUMT00000362751.1|DDX11L1-202|DDX11L1|1657|processed_transcript|\" ## [2] \"GTTAACTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGTGTATTTGCTGTC\"                                                                  ## [3] \"TCTTAGCCCAGACTTCCCGTGTCCTTTCCACCGGGCCTTTGAGAGGTCACAGGGTCTTGA\"                                                                  ## [4] \"TGCTGTGGTCTTCATCTGCAGGTGTCTGACTTCCAGCAACTGCTGGCCTGTGCCAGGGTG\"                                                                  ## [5] \"CAAGCTGAGCACTGGAGTGGAGTTTTCCTGTGGAGAGGAGCCATGCCTAGAGTGGGATGG\" tx_to_gene <- make_tx_to_gene(   file_path = fasta_path,   file_type = \"fasta\" ) head(tx_to_gene) ## # A tibble: 6 × 8 ##   transcript_id    gene_id havanna_gene_id havanna_transcript_id transcript_name ##   <chr>            <chr>   <chr>           <chr>                 <chr>           ## 1 ENST00000456328… ENSG00… OTTHUMG0000000… OTTHUMT00000362751.1  DDX11L1-202     ## 2 ENST00000450305… ENSG00… OTTHUMG0000000… OTTHUMT00000002844.2  DDX11L1-201     ## 3 ENST00000488147… ENSG00… OTTHUMG0000000… OTTHUMT00000002839.1  WASH7P-201      ## 4 ENST00000619216… ENSG00… -               -                     MIR6859-1-201   ## 5 ENST00000473358… ENSG00… OTTHUMG0000000… OTTHUMT00000002840.1  MIR1302-2HG-202 ## 6 ENST00000469289… ENSG00… OTTHUMG0000000… OTTHUMT00000002841.2  MIR1302-2HG-201 ## # ℹ 3 more variables: gene_name <chr>, entrez_id <chr>, transcript_type <chr> tx_to_gene <- tx_to_gene |>   dplyr::select(     transcript_id, gene_id,     transcript_name, gene_name,     transcript_type   ) gene_join <- tx_to_gene |>   dplyr::select(gene_id, gene_name) |>   distinct() PE1_DEGs <- PE1_DEGs |>   left_join(gene_join, by = \"gene_id\") tpm_join <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name) |>   distinct() PE1_counts <- PE1_counts |>   left_join(tpm_join, by = c(\"transcript_id\"))"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"part-3-constructing-the-main-table","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 3: Constructing the main table","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Gene-level information input us categorical values added DET table. detail: need now transcript’s gene (1) pass gene-level expression cutoff values (2) type transcript belongs . multiple types Ensembl library definitions superpose one another, ones analyzed can seen figure  First add transcript name type information DET table gene expression level convert DEG table cutting get genes present DE exclude possible noise. used cutoffs absolute log2FC higher one pvalue lower 0.05 first filter DEG table significant ones add column main DET table using isDEGsig function. now tables need graphs analyses. One detail DET final table now allows us see genes whose transcripts differentially expressed genes simple dplyr filter. table represent cases characterized isoform switches, two transcripts gene expressed opposite directions makes total expression gene significant either -regulated.","code":"knitr::include_graphics(\"https://i.imgur.com/UWoAr0k.png\") transcript_joined <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name, transcript_type) |>   distinct() PE1_DETs <- PE1_DETs |>   left_join(transcript_joined, by = \"transcript_id\") PE1_DEGs_new_names_sig <- PE1_DEGs |>   filter(abs(log2FC) >= 1) |>   filter(pvalue <= 0.05) |>   dplyr::select(gene_name) |>   drop_na() DEGs_sig_joined <- PE1_DEGs_new_names_sig |>   left_join(tx_to_gene, by = \"gene_name\") transcript_gene_join <- tx_to_gene |>   dplyr::select(transcript_name, gene_name) |>   distinct() PE1_DETs_final <- is_deg_sig(DEGs_sig_joined$transcript_name, PE1_DETs) PE1_DETs_final <- PE1_DETs_final |>   left_join(transcript_gene_join, by = \"transcript_name\") DETs_not_DEGs <- PE1_DETs_final |>   filter(pvalue < 0.05, abs(log2FC) > 1, DEG_sig == \"NO\")"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"colors","dir":"Articles","previous_headings":"","what":"Colors","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"start plotting define general set colors used entire pipeline associated certain type transcript. colored abundant types separately less abundant grey tone name vector accordingly","code":"fixed_tx_biotypes <- c(   \"gene\", \"protein_coding\", \"retained_intron\",   \"processed_transcript\", \"nonsense_mediated_decay\",   \"lncRNA\", \"processed_pseudogene\",   \"transcribed_unprocessed_pseudogene\",   \"unprocessed_pseudogene\", \"non_stop_decay\", \"transcribed_unitary_pseudogene\",   \"pseudogene\", \"unitary_pseudogene\" )  tx_type_color_names <- c(   \"#fb8072\", \"#a6d854\", \"#8da0cb\", \"#fc8d62\",   \"#66c2a5\", \"#e78ac3\", \"#ffd92f\", \"#e5c494\",   \"#d9d9d9\", \"#d9d9d9\", \"#d9d9d9\", \"#ffffb3\",   \"#d9d9d9\" )  names(tx_type_color_names) <- fixed_tx_biotypes  tx_type_color_names ##                               gene                     protein_coding  ##                          \"#fb8072\"                          \"#a6d854\"  ##                    retained_intron               processed_transcript  ##                          \"#8da0cb\"                          \"#fc8d62\"  ##            nonsense_mediated_decay                             lncRNA  ##                          \"#66c2a5\"                          \"#e78ac3\"  ##               processed_pseudogene transcribed_unprocessed_pseudogene  ##                          \"#ffd92f\"                          \"#e5c494\"  ##             unprocessed_pseudogene                     non_stop_decay  ##                          \"#d9d9d9\"                          \"#d9d9d9\"  ##     transcribed_unitary_pseudogene                         pseudogene  ##                          \"#d9d9d9\"                          \"#ffffb3\"  ##                 unitary_pseudogene  ##                          \"#d9d9d9\""},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"log2fc-plot","dir":"Articles","previous_headings":"","what":"Log2FC Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"simplest first plot tutorial log2FC plot, plot compare foldchange case vs control gene, transcripts adding significance information. make combined version DEG table DET table using function join_DEG_DET. Now just use plotLog2FC gene like. function also works well small vector gene_names.","code":"DEG_DET_table <- join_DEG_DET(PE1_DEGs, PE1_DETs_final, 1, 0.05) head(DEG_DET_table) ## # A tibble: 6 × 9 ##   id             log2FC pvalue qvalue name  transcript_type gene_name abs_log2FC ##   <chr>           <dbl>  <dbl>  <dbl> <chr> <chr>           <chr>          <dbl> ## 1 ENSG00000000… -0.320  0.0485  0.125 TSPA… gene            TSPAN6        0.320  ## 2 ENSG00000000…  0.381  0.107   0.222 TNMD  gene            TNMD          0.381  ## 3 ENSG00000000… -0.0693 0.260   0.417 DPM1  gene            DPM1          0.0693 ## 4 ENSG00000000…  0.107  0.386   0.547 SCYL3 gene            SCYL3         0.107  ## 5 ENSG00000000…  0.162  0.229   0.380 C1or… gene            C1orf112      0.162  ## 6 ENSG00000000… -0.162  0.160   0.296 FGR   gene            FGR           0.162  ## # ℹ 1 more variable: significance <chr> plot_log2FC(DEG_DET_table, \"RBPJ\") # Work here to look better? or just remove for now # the best would be a loop that goes over each one of a list and # plots them in a folder the default could be the DET not deg table plot_obj <- plot_log2FC(DEG_DET_table, c(\"RBPJ\", \"EGFR\", \"PNCK\")) library(ggplot2) plot_obj +   theme_classic() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"profile-plot","dir":"Articles","previous_headings":"","what":"Profile Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Another good quantifiable way visualize switch using Transcript per Million Count transcript, compared gene case control conditions. use profile plot one size plots values TPM case conditions value TPM control conditions.","code":"DEG_DET_table |>   filter(!transcript_type %in% \"gene\") ## # A tibble: 70,870 × 9 ##    id          log2FC  pvalue  qvalue name  transcript_type gene_name abs_log2FC ##    <chr>        <dbl>   <dbl>   <dbl> <chr> <chr>           <chr>          <dbl> ##  1 ENST000006…  0.640 3.11e-1 5.40e-1 ISG1… protein_coding  ISG15          0.640 ##  2 ENST000003…  0.534 1.29e-2 7.07e-2 AGRN… protein_coding  AGRN           0.534 ##  3 ENST000004… -0.530 5.81e-2 1.91e-1 AGRN… retained_intron AGRN           0.530 ##  4 ENST000004…  1.83  1.66e-5 6.81e-4 RNF2… protein_coding  RNF223         1.83  ##  5 ENST000004…  0.415 2.20e-1 4.40e-1 TNFR… retained_intron TNFRSF4        0.415 ##  6 ENST000003…  0.374 2.27e-1 4.48e-1 TNFR… protein_coding  TNFRSF4        0.374 ##  7 ENST000003…  0.479 6.70e-2 2.09e-1 TAS1… protein_coding  TAS1R3         0.479 ##  8 ENST000003…  0.217 3.82e-1 6.06e-1 DVL1… protein_coding  DVL1           0.217 ##  9 ENST000003…  0.570 8.12e-2 2.37e-1 DVL1… protein_coding  DVL1           0.570 ## 10 ENST000006…  1.91  4.34e-1 6.52e-1 DVL1… protein_coding  DVL1           1.91  ## # ℹ 70,860 more rows ## # ℹ 1 more variable: significance <chr> unique(DEG_DET_table$transcript_type) ##  [1] \"gene\"                               \"protein_coding\"                     ##  [3] \"retained_intron\"                    \"processed_transcript\"               ##  [5] \"lncRNA\"                             \"nonsense_mediated_decay\"            ##  [7] \"processed_pseudogene\"               \"unprocessed_pseudogene\"             ##  [9] \"transcribed_unprocessed_pseudogene\" \"non_stop_decay\"                     ## [11] \"transcribed_unitary_pseudogene\"     \"pseudogene\"                         ## [13] \"unitary_pseudogene\" profile_data_df <- prepare_profile_data(   txi_transcript = PE1_counts,   tx_to_gene = tx_to_gene,   sample_metadata = sample_table,   de_result_gene = PE1_DEGs,   de_result_transcript = PE1_DETs,   var = \"condition\",   var_levels = c(\"control\", \"treatment\") ) # # # Create output directory if don't exist yet # path_to_save <- \"results/profile_plot\" # fs::dir_create(path_to_save)  profile_plot <- plot_tx_expr(   genes_to_plot = \"RBPJ\",   profile_data = profile_data_df ) profile_plot # profile_data_df  # profile_plot <- plot_tx_expr( # genes_to_plot = \"ILR2A\", # profile_data = profile_data_df # ) # profile_data_df |> # filter(genename == \"ILR2A\")"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"functional-transcript-enrichment","dir":"Articles","previous_headings":"","what":"Functional Transcript Enrichment","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One biggest caveats transcript level analysis many times hard extract biologically relevant information much data. Instead final table 900 genes get table 3.000 transcripts differential expression cut. next step gene-level DE functional enrichment assigning genes metabolic pathways may regulating. Unfortunately comprehensive datasets pathways transcripts may regulating gene level analyses normally loses difference transcripts can produce proteins (protein_coding) canonical translation pathways . solve problem developed method expanding known .gmts transcript information separately enrich selected category transcript. alternative spliced isoforms code canonical proteins abundant classified Nonsense-mediated decay, premature stop codon subject targeted degradation Processed transcript, , reason, posses complete Open Reading Frame. Inside processed transcript category one highest count Retained introns, sequences retain intronic portion processing. three categories abundant transcripts arise alternative splicing protein coding gene three main focus enrichment graphs. first choose .gmt used enrichment, case loaded human reactome gene list MSigDB called c2. gene list GMT format works . gmt loaded fgsea format lists biological process. Visualize table running run run_enrichment function needs DETs final table, genesetlist pvalue cutoff used. generate table enrichment extra column “experiment”. experiment column five possible values: Protein-coding: enrichment associated transcripts categorized protein coding. Unproductive: term used moving forward combine three categories alternative spliced isoforms transcribed coding genes. authors aware biologically term deprecated since kind transcripts can produce peptides alternative translation pathways. unproductive read virtually incapable producing protein associated gene. interpretation, made category find pathways regulated coding data, unproductive transcripts. also added three categories individual alternative spliced types pathways regulated specific analysis. deep transcriptome individual enrichment categories can also lead promissing insights. Plotting enrichment used LollipopPlot plot enrichments side side size pathway radius circles transparency pathway passes desired cutoff. First plot Protein_coding versus Unproductive extringent NES cutoff.  now specific unproductive subtypes","code":"path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/temp_libpathd65248a5d703/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt genesets_list <- fgsea::gmtPathways(   gmt.file = path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") )  head(str(genesets_list[1:5])) ## List of 5 ##  $ REACTOME_INTERLEUKIN_6_SIGNALING        : chr [1:11] \"JAK2\" \"TYK2\" \"CBL\" \"STAT1\" ... ##  $ REACTOME_APOPTOSIS                      : chr [1:179] \"BAD\" \"CFLAR\" \"PSMB1\" \"PSMC4\" ... ##  $ REACTOME_HEMOSTASIS                     : chr [1:678] \"FGR\" \"CD99\" \"TFPI\" \"KDM1A\" ... ##  $ REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS: chr [1:55] \"BAD\" \"BID\" \"BAK1\" \"CASP8\" ... ##  $ REACTOME_MAPK3_ERK1_ACTIVATION          : chr [1:10] \"JAK2\" \"MAPK3\" \"TYK2\" \"IL6ST\" ... ## NULL head(genesets_list[[1]]) ## [1] \"JAK2\"  \"TYK2\"  \"CBL\"   \"STAT1\" \"IL6ST\" \"IL6\" head(PE1_DETs_final) ## # A tibble: 6 × 8 ##   transcript_id   log2FC  pvalue  qvalue transcript_name transcript_type DEG_sig ##   <chr>            <dbl>   <dbl>   <dbl> <chr>           <chr>           <chr>   ## 1 ENST0000064952…  0.640 3.11e-1 5.40e-1 ISG15-203       protein_coding  YES     ## 2 ENST0000037937…  0.534 1.29e-2 7.07e-2 AGRN-201        protein_coding  YES     ## 3 ENST0000046111… -0.530 5.81e-2 1.91e-1 AGRN-202        retained_intron YES     ## 4 ENST0000045346…  1.83  1.66e-5 6.81e-4 RNF223-201      protein_coding  YES     ## 5 ENST0000049786…  0.415 2.20e-1 4.40e-1 TNFRSF4-203     retained_intron YES     ## 6 ENST0000037923…  0.374 2.27e-1 4.48e-1 TNFRSF4-201     protein_coding  YES     ## # ℹ 1 more variable: gene_name <chr> enrichment_df <- run_enrichment(   det_df = PE1_DETs_final,   genesets_list = genesets_list,   pval_cutoff = 0.05 ) head(enrichment_df) ## # A tibble: 6 × 9 ##   pathway         pval     padj log2err    ES   NES  size leadingEdge experiment ##   <chr>          <dbl>    <dbl>   <dbl> <dbl> <dbl> <int> <list>      <chr>      ## 1 REACTOMEMA… 1.86e- 2 3.33e- 2   0.352 0.712  1.64    11 <chr [8]>   protein_c… ## 2 REACTOME_A… 5.70e- 3 1.23e- 2   0.407 0.878  1.62     5 <chr [3]>   protein_c… ## 3 REACTOME_A… 1.59e-13 3.25e-12   0.944 0.695  2.41    95 <chr [40]>  protein_c… ## 4 REACTOME_A… 3.28e-10 3.92e- 9   0.814 0.690  2.29    72 <chr [26]>  protein_c… ## 5 REACTOME_A… 7.00e- 4 1.98e- 3   0.477 0.722  1.86    20 <chr [8]>   protein_c… ## 6 REACTOME_A… 4.54e- 2 7.25e- 2   0.277 0.603  1.52    17 <chr [11]>  protein_c… head(names(genesets_list)) ## [1] \"REACTOME_INTERLEUKIN_6_SIGNALING\"                                                            ## [2] \"REACTOME_APOPTOSIS\"                                                                          ## [3] \"REACTOME_HEMOSTASIS\"                                                                         ## [4] \"REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS\"                                                    ## [5] \"REACTOME_MAPK3_ERK1_ACTIVATION\"                                                              ## [6] \"REACTOME_TRANSLESION_SYNTHESIS_BY_Y_FAMILY_DNA_POLYMERASES_BYPASSES_LESIONS_ON_DNA_TEMPLATE\" unique(enrichment_df$experiment) ## [1] \"protein_coding\"          \"unproductive\"            ## [3] \"retained_intron\"         \"processed_transcript\"    ## [5] \"nonsense_mediated_decay\" enrichment_df |>   dplyr::filter((experiment %in% c(\"protein_coding\", \"unproductive\")) & (abs(NES) > 2)) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 30) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"mako\", direction = -1) enrichment_df |>   dplyr::filter(!experiment %in% c(\"protein_coding\", \"unproductive\") & abs(NES) > 1.5) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 20) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"magma\", direction = -1)"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"genomic-context-plot","dir":"Articles","previous_headings":"","what":"Genomic Context Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One main issues arrived start isoform level analysis, easy direct way visualize transcript-types compared one another, using transcript-type transcript per million information. alignment plots today use outputs .bam/.sam files align directly genome making us lose transcript-type information increasing considerably processing time analysis size files time takes re-align. solve problem used direct approach allows us visualize difference introns exons transcript, types transcripts much counted according pseudo-alignment; turn loses read alignment count proportion. alignment count unfortunately requires running alignment softwares dealing .sam .bam files covered tutorial. called plot genomic context plot takes inspiration way Ensembl shows transcripts genome browser. specific plot requires GFF file can also downloaded GENCODE included file path next function. GFF file needs downloaded accurate version transcriptome, case v34. table used plotting Plotting","code":"exon_df <- prepare_exon_annotation(   gene_name = \"RBPJ\",   file_path = \"data-raw/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz\",   file_type = \"gff\" ) exon_df ## # A tibble: 202 × 5 ##    exon_left exon_right strand tx_id             tx_name ##    <chr>     <chr>      <chr>  <chr>             <chr>   ##  1 26163455  26163614   +      ENST00000512351.5 RBPJ    ##  2 26362446  26362628   +      ENST00000512351.5 RBPJ    ##  3 26386353  26386391   +      ENST00000512351.5 RBPJ    ##  4 26406175  26406270   +      ENST00000512351.5 RBPJ    ##  5 26415475  26415605   +      ENST00000512351.5 RBPJ    ##  6 26272607  26272761   +      ENST00000510778.6 RBPJ    ##  7 26386353  26386391   +      ENST00000510778.6 RBPJ    ##  8 26406175  26406270   +      ENST00000510778.6 RBPJ    ##  9 26415475  26415640   +      ENST00000510778.6 RBPJ    ## 10 26420551  26420725   +      ENST00000510778.6 RBPJ    ## # ℹ 192 more rows exon_df |>   plot_tx_context()"},{"path":"https://luciorq.github.io/isoformic/articles/intro_isoformic.html","id":"protein-coding-example","dir":"Articles","previous_headings":"Genomic Context Plot","what":"Protein coding example","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Testing XIST EGFR genes dual context.","code":"exon_df <- prepare_exon_annotation(   gene_name = \"EGFR\",   file_path = \"data-raw/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz\",   file_type = \"gff\" ) exon_df |>   plot_tx_context() dual_exon_df <- prepare_exon_annotation(   gene_name = c(\"XIST\", \"EGFR\"),   file_path = \"data-raw/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz\",   file_type = \"gff\" ) dual_exon_df |>   plot_tx_context() dual_exon_df |>   dplyr::filter(tx_id %in% c(\"ENST00000602495.1\", \"ENST00000602863.2\")) |>   plot_tx_context()"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"the-isoformic-method","dir":"Articles","previous_headings":"","what":"The Isoformic method","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Welcome isoformic, workflow isoform-level biological interpretation transcriptomic data.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"information","dir":"Articles","previous_headings":"The Isoformic method","what":"Information","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"data used examples extracted paper: “Landscape Dysregulated Placental RNA Editing Associated Preeclampsia” analyzed generated RNA-Seq datasets preeclamptic control placentas. dataset chosen due many biological replicates high sequencing depth. Load dependency packages","code":"# devtools::load_all() library(isoformic) library(fs) library(readr) library(dplyr) library(tidyr) library(stringr) library(ggplot2)"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"initial-considerations","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Initial Considerations","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"highly recommend use Salmon transcript-level abundance estimation swish method implemented fishpond R package isoform-level differential expression. GENCODE project offers good annotation isoforms human mouse genomes, including isoforms non-coding genes. Using sources annotation can render completely different results following analysis.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"part-1-data-input","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 1: Data input","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"version need two essential input two optional inputs. Essential input 1: transcript differential expression table. table can outputted kind differential expression software use needs contain 1) information Transcript name Ensembl Transcript ID per line 2) log2FoldChange information column named “log2FoldChange”. 3) p-value information column named “pvalue”. columns table used main analysis. DET table UNFILTERED version table. Example: Essential input 2: FASTA file GENCODE corresponds fasta used transcriptome alignment. need version since use names GENCODE version mergings. annotation used also need GENCODE since posses transcript_type column used information well. wish CAN provide information external source GENCODE, need table least three columns: 1)transcript_name column needs match gene names DET table TPM table, 2) gene-name column tell gene transcripts belong 3) transcript_type column. table also use transcript names GENCODE column stating transcript biotype also got GENCODE annotation. statistics can ‘pvalue’, ‘svalue’ ‘qvalue’ ‘log2FoldChange’ case control conditions also needed plots. Optional inputs: 1) Transcript per million (TPM) table matching transcripts differential expression table 2) GFF3 file transcriptome version corresponds FASTA 3) table differentially expressed genes data also use comparison. differential expression table can used pipeline authors, multiple testing, reached conclusion swish implementation differential transcript expression analysis using inferential replicate counts Salmon one performs best medium high depth transcriptome libraries looking number transcripts significant values. well annotated transcriptomes output results tests mentioned done using human data. Isoformic makes available example files can used model formatting necessary files running workflow. files can found following path. files available can seen : load table points libraries represent cases (treatment) controls. library, cases pregnant woman Preeclampsia controls matched pregnant without Preeclampsia.","code":"path_package(\"isoformic\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic PE1_DETs <- read_csv(path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\")) head(PE1_DETs) ## # A tibble: 6 × 4 ##   transcript_id      log2FC  pvalue qvalue ##   <chr>               <dbl>   <dbl>  <dbl> ## 1 ENST00000456328.2 -0.692  0.0199  0.0940 ## 2 ENST00000488147.1  0.0731 0.652   0.812  ## 3 ENST00000466430.5 -0.146  0.364   0.590  ## 4 ENST00000442987.3 -0.183  0.0841  0.242  ## 5 ENST00000494149.2 -0.728  0.00599 0.0420 ## 6 ENST00000595919.1 -0.0789 0.951   0.977 path_package(\"isoformic\", \"extdata\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata path_package(\"isoformic\", \"extdata\") |>   dir_ls() ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/DEGs_PE_fixed2.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/DETs_fixed.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/PE_1_DETs.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/PE_1_counts.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/example_gencode.v34.annotation.gff.gz ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/example_gencode.v34.annotation.parquet ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/hsapiens_REAC_subset.gmt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/isoformic-logo.png ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/mini_quants PE1_DETs <- path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\") |>   read_csv() PE1_DEGs <- path_package(\"isoformic\", \"extdata\", \"DEGs_PE_fixed2.csv\") |>   read_csv() PE1_counts <- path_package(\"isoformic\", \"extdata\", \"PE_1_counts.csv\") |>   read_csv() |>   dplyr::rename(transcript_id = `...1`) sample_table <- data.frame(   samples = colnames(PE1_counts)[2:ncol(PE1_counts)],   condition = c(rep(\"treatment\", 8), rep(\"control\", ncol(PE1_counts) - 9)) ) head(sample_table) ##       samples condition ## 1 SRR11498039 treatment ## 2 SRR11498040 treatment ## 3 SRR11498041 treatment ## 4 SRR11498042 treatment ## 5 SRR11498043 treatment ## 6 SRR11498044 treatment"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"download-reference-files","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data > Part 1: Data input","what":"Download reference files","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"references used project obtained GENCODE Project version 33 Human genome annotation. annotation file GFF3 format obtained <’https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.annotation.gff3.gz>. step may take depending speed internet connection. download mouse references, necessary include letter ‘M’ version string (e.g., “M37”).","code":"gff_file_path <- download_reference(version = \"33\", file_type = \"gff\") # download_reference(version = \"33\", file_type = \"fasta\") # download_reference(version = \"33\", file_type = \"gtf\")"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"part-2-transcript-to-gene-and-gene-to-transcript-reference-tables","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 2: Transcript to Gene and Gene to transcript reference tables","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Using FASTA file GENCODE construct transcript per gene dictionary table add information main DEG, DET TPM table. step depend lot names columns tables Vignette decided change names keep consistency. input used FASTA file containing transcript sequences annotation information downloaded GENCODE website specific version used alignment. case GENCODE v33. header shows imported table still weird tidy, pass make_tx_to_gene function make tidy ready use. Now tx_to_gene table 6 columns order: Ensembl transcript id, Ensembl gene id, Havanna gene id, Havanna transcript id, transcript name, gene name, transcript length transcript type. DEG, DET TPM table need Ensembl gene id, Gene name transcript type information can convert tables transcript_name add type information gene DE DET table. Select columns gene id gene name info First add gene_name information DEG table Now transcript name TPM table DET table main table analysis.","code":"fasta_path <- download_reference(version = \"33\", file_type = \"fasta\") read_lines(fasta_path, n_max = 5) ## [1] \">ENST00000456328.2|ENSG00000223972.5|OTTHUMG00000000961.2|OTTHUMT00000362751.1|DDX11L1-202|DDX11L1|1657|processed_transcript|\" ## [2] \"GTTAACTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGTGTATTTGCTGTC\"                                                                  ## [3] \"TCTTAGCCCAGACTTCCCGTGTCCTTTCCACCGGGCCTTTGAGAGGTCACAGGGTCTTGA\"                                                                  ## [4] \"TGCTGTGGTCTTCATCTGCAGGTGTCTGACTTCCAGCAACTGCTGGCCTGTGCCAGGGTG\"                                                                  ## [5] \"CAAGCTGAGCACTGGAGTGGAGTTTTCCTGTGGAGAGGAGCCATGCCTAGAGTGGGATGG\" tx_to_gene <- make_tx_to_gene(   file_path = fasta_path,   file_type = \"fasta\" ) head(tx_to_gene) ## # A tibble: 6 × 8 ##   transcript_id    gene_id havanna_gene_id havanna_transcript_id transcript_name ##   <chr>            <chr>   <chr>           <chr>                 <chr>           ## 1 ENST00000456328… ENSG00… OTTHUMG0000000… OTTHUMT00000362751.1  DDX11L1-202     ## 2 ENST00000450305… ENSG00… OTTHUMG0000000… OTTHUMT00000002844.2  DDX11L1-201     ## 3 ENST00000488147… ENSG00… OTTHUMG0000000… OTTHUMT00000002839.1  WASH7P-201      ## 4 ENST00000619216… ENSG00… -               -                     MIR6859-1-201   ## 5 ENST00000473358… ENSG00… OTTHUMG0000000… OTTHUMT00000002840.1  MIR1302-2HG-202 ## 6 ENST00000469289… ENSG00… OTTHUMG0000000… OTTHUMT00000002841.2  MIR1302-2HG-201 ## # ℹ 3 more variables: gene_name <chr>, tx_length <chr>, transcript_type <chr> tx_to_gene <- tx_to_gene |>   dplyr::select(     transcript_id, gene_id,     transcript_name, gene_name,     transcript_type   ) head(tx_to_gene) ## # A tibble: 6 × 5 ##   transcript_id     gene_id           transcript_name gene_name  transcript_type ##   <chr>             <chr>             <chr>           <chr>      <chr>           ## 1 ENST00000456328.2 ENSG00000223972.5 DDX11L1-202     DDX11L1    processed_tran… ## 2 ENST00000450305.2 ENSG00000223972.5 DDX11L1-201     DDX11L1    transcribed_un… ## 3 ENST00000488147.1 ENSG00000227232.5 WASH7P-201      WASH7P     unprocessed_ps… ## 4 ENST00000619216.1 ENSG00000278267.1 MIR6859-1-201   MIR6859-1  miRNA           ## 5 ENST00000473358.1 ENSG00000243485.5 MIR1302-2HG-202 MIR1302-2… lncRNA          ## 6 ENST00000469289.1 ENSG00000243485.5 MIR1302-2HG-201 MIR1302-2… lncRNA gene_join <- tx_to_gene |>   dplyr::select(gene_id, gene_name) |>   distinct() PE1_DEGs <- PE1_DEGs |>   left_join(gene_join, by = \"gene_id\") |>   dplyr::relocate(\"gene_name\", .after = \"gene_id\") tpm_join <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name) |>   distinct() PE1_counts <- PE1_counts |>   left_join(tpm_join, by = c(\"transcript_id\")) |>   dplyr::relocate(\"transcript_name\", .after = \"transcript_id\")"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"part-3-constructing-the-main-table","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 3: Constructing the main table","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Gene-level information input us categorical values added DET table. detail: need now transcript’s gene (1) pass gene-level expression cutoff values (2) type transcript belongs . multiple types Ensembl library definitions superpose one another, ones analyzed can seen figure  First add transcript name type information DET table gene expression level convert DEG table cutting get genes present DE exclude possible noise. used cutoffs absolute log2FC higher one pvalue lower 0.05 first filter DEG table significant ones add column main DET table using isDEGsig function. now tables need graphs analyses. One detail DET final table now allows us see genes whose transcripts differentially expressed genes simple dplyr filter. table represent cases characterized isoform switches, two transcripts gene expressed opposite directions makes total expression gene significant either -regulated.","code":"knitr::include_graphics(\"https://i.imgur.com/UWoAr0k.png\") transcript_joined <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name, transcript_type) |>   dplyr::distinct() PE1_DETs <- PE1_DETs |>   dplyr::left_join(transcript_joined, by = \"transcript_id\") |>   dplyr::relocate(\"transcript_name\", \"transcript_type\", .after = \"transcript_id\") PE1_DEGs_new_names_sig <- PE1_DEGs |>   filter(abs(log2FC) >= 1) |>   filter(pvalue <= 0.05) |>   dplyr::select(gene_name) |>   tidyr::drop_na() DEGs_sig_joined <- PE1_DEGs_new_names_sig |>   left_join(tx_to_gene, by = \"gene_name\") transcript_gene_join <- tx_to_gene |>   dplyr::select(transcript_name, gene_name) |>   dplyr::distinct() PE1_DETs_final <- is_deg_sig(DEGs_sig_joined$transcript_name, PE1_DETs) PE1_DETs_final <- PE1_DETs_final |>   left_join(transcript_gene_join, by = \"transcript_name\") DETs_not_DEGs <- PE1_DETs_final |>   filter(pvalue < 0.05, abs(log2FC) > 1, DEG_sig == \"NO\")  DETs_not_DEGs |>   dplyr::arrange(qvalue) ## # A tibble: 3,882 × 8 ##    transcript_id  transcript_name transcript_type log2FC  pvalue  qvalue DEG_sig ##    <chr>          <chr>           <chr>            <dbl>   <dbl>   <dbl> <chr>   ##  1 ENST000004691… PLA2G2A-204     processed_tran…  -3.24 1.38e-7 2.36e-5 NO      ##  2 ENST000003155… CDC42-201       protein_coding    2.33 1.38e-7 2.36e-5 NO      ##  3 ENST000003743… NIPAL3-204      protein_coding   -1.21 1.38e-7 2.36e-5 NO      ##  4 ENST000004809… TMEM50A-203     processed_tran…   1.67 1.38e-7 2.36e-5 NO      ##  5 ENST000004738… MAN1C1-204      processed_tran…   1.18 1.38e-7 2.36e-5 NO      ##  6 ENST000004965… MAN1C1-207      processed_tran…   1.49 1.38e-7 2.36e-5 NO      ##  7 ENST000004557… STMN1-206       protein_coding    1.01 1.38e-7 2.36e-5 NO      ##  8 ENST000003742… STMN1-202       protein_coding   -2.75 1.38e-7 2.36e-5 NO      ##  9 ENST000003599… PTPRF-201       protein_coding    1.81 1.38e-7 2.36e-5 NO      ## 10 ENST000004641… NASP-207        retained_intron   1.60 1.38e-7 2.36e-5 NO      ## # ℹ 3,872 more rows ## # ℹ 1 more variable: gene_name <chr> PE1_DETs_final |>   dplyr::arrange(qvalue) |>   dplyr::arrange(-abs(log2FC)) |>   # dplyr::slice_head(n = 30) |>   dplyr::filter(stringr::str_detect(transcript_name, \"^EGFR\")) |>   print(n = 30) ## # A tibble: 8 × 8 ##   transcript_id   transcript_name transcript_type log2FC  pvalue  qvalue DEG_sig ##   <chr>           <chr>           <chr>            <dbl>   <dbl>   <dbl> <chr>   ## 1 ENST0000063846… EGFR-211        protein_coding   8.57  2.26e-2 1.02e-1 NO      ## 2 ENST0000042031… EGFR-204        protein_coding   1.72  2.76e-7 3.20e-5 NO      ## 3 ENST0000045508… EGFR-207        protein_coding   1.34  4.06e-4 6.49e-3 NO      ## 4 ENST0000044241… EGFR-AS1-201    lncRNA           1.14  1.26e-4 2.85e-3 YES     ## 5 ENST0000048550… EGFR-210        retained_intron  1.09  3.90e-5 1.25e-3 NO      ## 6 ENST0000034457… EGFR-203        protein_coding   0.969 2.76e-6 1.84e-4 NO      ## 7 ENST0000027549… EGFR-201        protein_coding   0.424 1.02e-2 5.99e-2 NO      ## 8 ENST0000045968… EGFR-208        processed_tran…  0.421 3.44e-2 1.35e-1 NO      ## # ℹ 1 more variable: gene_name <chr>"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"colors","dir":"Articles","previous_headings":"","what":"Colors","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"start plotting define general set colors used entire pipeline associated certain type transcript. colored abundant types separately less abundant grey tone name vector accordingly","code":"tx_biotypes <- c(   \"gene\", \"protein_coding\",   \"retained_intron\", \"protein_coding_CDS_not_defined\",   \"nonsense_mediated_decay\", \"lncRNA\",   \"processed_pseudogene\", \"transcribed_unprocessed_pseudogene\",   \"unprocessed_pseudogene\", \"non_stop_decay\",   \"transcribed_unitary_pseudogene\", \"pseudogene\",   \"unitary_pseudogene\", \"processed_transcript\" )  tx_biotype_color_names <- c(   \"#fb8072\", \"#a6d854\",   \"#8da0cb\", \"#fc8d62\",   \"#66c2a5\", \"#e78ac3\",   \"#ffd92f\", \"#e5c494\",   \"#d9d9d9\", \"#d9d9d9\",   \"#d9d9d9\", \"#ffffb3\",   \"#d9d9d9\", \"#d9d9d9\" )  names(tx_biotype_color_names) <- tx_biotypes  tx_biotype_color_names print(tx_type_palette()) ##                               gene                     protein_coding  ##                          \"#fb8072\"                          \"#a6d854\"  ##                    retained_intron     protein_coding_CDS_not_defined  ##                          \"#8da0cb\"                          \"#fc8d62\"  ##            nonsense_mediated_decay                             lncRNA  ##                          \"#66c2a5\"                          \"#e78ac3\"  ##               processed_pseudogene transcribed_unprocessed_pseudogene  ##                          \"#ffd92f\"                          \"#e5c494\"  ##             unprocessed_pseudogene                     non_stop_decay  ##                          \"#d9d9d9\"                          \"#d9d9d9\"  ##     transcribed_unitary_pseudogene                         pseudogene  ##                          \"#d9d9d9\"                          \"#ffffb3\"  ##                 unitary_pseudogene               processed_transcript  ##                          \"#d9d9d9\"                          \"#d9d9d9\""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"log2fc-plot","dir":"Articles","previous_headings":"","what":"Log2FC Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"simplest first plot tutorial log2FC plot, plot compare foldchange case vs control gene, transcripts adding significance information. make combined version DEG table DET table using function join_DEG_DET. Now just use plotLog2FC gene like. function also works well small vector gene_names.   Multiple panels.","code":"DEG_DET_table <- join_DEG_DET(PE1_DEGs, PE1_DETs_final, logfc_cut = 1, pval_cut = 0.05)  head(DEG_DET_table) ## # A tibble: 6 × 9 ##   feature_id         feature_name  log2FC pvalue qvalue feature_type gene_name ##   <chr>              <chr>          <dbl>  <dbl>  <dbl> <chr>        <chr>     ## 1 ENSG00000000003.15 TSPAN6       -0.320  0.0485  0.125 gene         TSPAN6    ## 2 ENSG00000000005.6  TNMD          0.381  0.107   0.222 gene         TNMD      ## 3 ENSG00000000419.12 DPM1         -0.0693 0.260   0.417 gene         DPM1      ## 4 ENSG00000000457.14 SCYL3         0.107  0.386   0.547 gene         SCYL3     ## 5 ENSG00000000460.17 C1orf112      0.162  0.229   0.380 gene         C1orf112  ## 6 ENSG00000000938.13 FGR          -0.162  0.160   0.296 gene         FGR       ## # ℹ 2 more variables: significance <chr>, is_de <chr> # selected_gene = \"RBPJ\" plot_log2FC(DEG_DET_table, \"RBPJ\") # Work here to look better? or just remove for now # the best would be a loop that goes over each one of a list and # plots them in a folder the default could be the DET not deg table plot_obj <- plot_log2FC(DEG_DET_table, c(\"RBPJ\", \"EGFR\", \"PNCK\"))  plot_obj +   theme_classic() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) c(\"RBPJ\", \"EGFR\", \"PNCK\") |>   purrr::map(function(gene) {     DEG_DET_table |>       plot_log2FC(gene) +       ggplot2::theme_classic() +       ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, vjust = 1, hjust = 1)) +       ggplot2::ggtitle(gene)   }) |>   patchwork::wrap_plots(ncol = 1, guides = \"collect\")"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"profile-plot","dir":"Articles","previous_headings":"","what":"Profile Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Another good quantifiable way visualize switch using Transcript per Million Count transcript, compared gene case control conditions. use profile plot one size plots values TPM case conditions value TPM control conditions.","code":"profile_data_df <- prepare_profile_data(   txi_transcript = PE1_counts,   tx_to_gene = tx_to_gene,   sample_metadata = sample_table,   de_result_gene = PE1_DEGs,   de_result_transcript = PE1_DETs,   var = \"condition\",   var_levels = c(\"control\", \"treatment\") )  profile_plot <- plot_tx_expr(   genes_to_plot = \"RBPJ\",   profile_data = profile_data_df ) profile_plot head(profile_data_df) ## # A tibble: 6 × 7 ##   genename condition mean_TPM      SD transcript_type DE    parent_gene ##   <chr>    <fct>        <dbl>   <dbl> <chr>           <fct> <chr>       ## 1 A1BG     control      11.7     4.53 gene            No    genename    ## 2 A1BG     treatment     9.60    4.80 gene            No    genename    ## 3 A1BG-AS1 control       7.28    4.20 gene            No    genename    ## 4 A1BG-AS1 treatment     5.80    4.17 gene            No    genename    ## 5 A2M      control    6342.   1870.   gene            No    genename    ## 6 A2M      treatment  5995.   1411.   gene            No    genename profile_data_df |>   filter(genename %in% \"IL2RA\") ## # A tibble: 2 × 7 ##   genename condition mean_TPM    SD transcript_type DE    parent_gene ##   <chr>    <fct>        <dbl> <dbl> <chr>           <fct> <chr>       ## 1 IL2RA    control       32.5 14.5  gene            Yes   genename    ## 2 IL2RA    treatment     11.8  9.04 gene            Yes   genename profile_plot <- plot_tx_expr(   genes_to_plot = \"IL2RA\",   profile_data = profile_data_df ) profile_plot profile_data_df |>   filter(genename %in% \"EGFR\") ## # A tibble: 2 × 7 ##   genename condition mean_TPM    SD transcript_type DE    parent_gene ##   <chr>    <fct>        <dbl> <dbl> <chr>           <fct> <chr>       ## 1 EGFR     control      3255.  774. gene            No    genename    ## 2 EGFR     treatment    4963. 2439. gene            No    genename profile_plot <- plot_tx_expr(   genes_to_plot = \"EGFR\",   profile_data = profile_data_df ) profile_plot"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"functional-transcript-enrichment","dir":"Articles","previous_headings":"","what":"Functional Transcript Enrichment","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One biggest caveats transcript level analysis many times hard extract biologically relevant information much data. Instead final table 900 genes get table 3.000 transcripts differential expression cut. next step gene-level DE functional enrichment assigning genes metabolic pathways may regulating. Unfortunately comprehensive datasets pathways transcripts may regulating gene level analyses normally loses difference transcripts can produce proteins (protein_coding) canonical translation pathways . solve problem developed method expanding known .gmts transcript information separately enrich selected category transcript. alternative spliced isoforms code canonical proteins abundant classified Nonsense-mediated decay, premature stop codon subject targeted degradation Protein coding CDS defined (formerly identified “processed transcript”), , reason, possess complete Open Reading Frame. Inside processed transcript category one highest count Retained introns, sequences retain intronic portion processing. three categories abundant transcripts arise alternative splicing protein coding gene three main focus enrichment graphs. first choose .gmt used enrichment, case loaded human reactome gene list MSigDB called c2. gene list GMT format works . gmt loaded fgsea format lists biological process. Visualize table running run run_enrichment() function needs DETs final table, gene set list p-value cutoff used. generate table enrichment extra column “experiment”. experiment column five possible values: Protein-coding: enrichment associated transcripts categorized protein coding. Unproductive: term used moving forward combine three categories alternative spliced isoforms transcribed coding genes. authors aware biologically term deprecated since kind transcripts can produce peptides alternative translation pathways. unproductive read virtually incapable producing protein associated gene. interpretation, made category find pathways regulated coding data, unproductive transcripts. also added three categories individual alternative spliced types pathways regulated specific analysis. deep transcriptome individual enrichment categories can also lead promising insights. Plotting enrichment used LollipopPlot plot enrichments side side size pathway radius circles transparency pathway passes desired cutoff. First plot Protein_coding versus Unproductive extringent NES cutoff.  now specific unproductive subtypes","code":"fs::path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpTPKoTH/temp_libpath13462785009f9/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt genesets_list <- fgsea::gmtPathways(   gmt.file = fs::path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") )  head(str(genesets_list[1:5])) ## List of 5 ##  $ REACTOME_INTERLEUKIN_6_SIGNALING        : chr [1:11] \"JAK2\" \"TYK2\" \"CBL\" \"STAT1\" ... ##  $ REACTOME_APOPTOSIS                      : chr [1:179] \"BAD\" \"CFLAR\" \"PSMB1\" \"PSMC4\" ... ##  $ REACTOME_HEMOSTASIS                     : chr [1:678] \"FGR\" \"CD99\" \"TFPI\" \"KDM1A\" ... ##  $ REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS: chr [1:55] \"BAD\" \"BID\" \"BAK1\" \"CASP8\" ... ##  $ REACTOME_MAPK3_ERK1_ACTIVATION          : chr [1:10] \"JAK2\" \"MAPK3\" \"TYK2\" \"IL6ST\" ... ## NULL head(genesets_list[[1]]) ## [1] \"JAK2\"  \"TYK2\"  \"CBL\"   \"STAT1\" \"IL6ST\" \"IL6\" head(PE1_DETs_final) ## # A tibble: 6 × 8 ##   transcript_id   transcript_name transcript_type log2FC  pvalue  qvalue DEG_sig ##   <chr>           <chr>           <chr>            <dbl>   <dbl>   <dbl> <chr>   ## 1 ENST0000064952… ISG15-203       protein_coding   0.640 3.11e-1 5.40e-1 YES     ## 2 ENST0000037937… AGRN-201        protein_coding   0.534 1.29e-2 7.07e-2 YES     ## 3 ENST0000046111… AGRN-202        retained_intron -0.530 5.81e-2 1.91e-1 YES     ## 4 ENST0000045346… RNF223-201      protein_coding   1.83  1.66e-5 6.81e-4 YES     ## 5 ENST0000049786… TNFRSF4-203     retained_intron  0.415 2.20e-1 4.40e-1 YES     ## 6 ENST0000037923… TNFRSF4-201     protein_coding   0.374 2.27e-1 4.48e-1 YES     ## # ℹ 1 more variable: gene_name <chr> enrichment_df <- run_enrichment(   det_df = PE1_DETs_final,   genesets_list = genesets_list,   tx_to_gene = tx_to_gene,   pval_cutoff = 0.05 ) head(enrichment_df) ##                                                         pathway         pval ##                                                          <char>        <num> ## 1:              REACTOME_ABC_FAMILY_PROTEINS_MEDIATED_TRANSPORT 0.0017585099 ## 2:                           REACTOME_ABC_TRANSPORTER_DISORDERS 0.0149607369 ## 3: REACTOME_ACROSOME_REACTION_AND_SPERM_OOCYTE_MEMBRANE_BINDING 0.0481283422 ## 4:                REACTOME_ACTIVATED_NTRK2_SIGNALS_THROUGH_PI3K 0.0004510984 ## 5:                 REACTOME_ACTIVATED_NTRK2_SIGNALS_THROUGH_RAS 0.0071143890 ## 6:                REACTOME_ACTIVATED_NTRK3_SIGNALS_THROUGH_PI3K 0.0251826142 ##          padj   log2err        ES      NES  size ##         <num>     <num>     <num>    <num> <int> ## 1: 0.04335908 0.4550599 0.3765654 1.464751   266 ## 2: 0.12872467 0.3807304 0.3668388 1.387234   199 ## 3: 0.26640864 0.2765006 0.7791037 1.516219     6 ## 4: 0.02191807 0.4984931 0.7290547 1.873398    19 ## 5: 0.08770874 0.4070179 0.6017850 1.642847    26 ## 6: 0.18634146 0.3524879 0.7330355 1.616108    10 ##                                                        leadingEdge ##                                                             <list> ## 1:     OS9-209,PSMD7-204,PSMA5-206,UBC-205,ABCB1-201,UBA52-201,... ## 2:    OS9-209,PSMD7-204,PSMA5-206,UBC-205,UBA52-201,ERLIN2-206,... ## 3:                                 CD9-208,CD9-216,CD9-212,CD9-204 ## 4: NTRK2-208,PIK3R1-202,PIK3R1-216,NTRK2-204,NTF4-203,GAB1-201,... ## 5:                  NTRK2-208,NTRK2-204,NTF4-203,NTF4-201,SHC1-208 ## 6: PIK3R1-202,PIK3R1-216,PIK3R1-201,PIK3CA-205,IRS1-201,PIK3R1-211 ##        experiment ##            <char> ## 1: protein_coding ## 2: protein_coding ## 3: protein_coding ## 4: protein_coding ## 5: protein_coding ## 6: protein_coding head(names(genesets_list)) ## [1] \"REACTOME_INTERLEUKIN_6_SIGNALING\"                                                            ## [2] \"REACTOME_APOPTOSIS\"                                                                          ## [3] \"REACTOME_HEMOSTASIS\"                                                                         ## [4] \"REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS\"                                                    ## [5] \"REACTOME_MAPK3_ERK1_ACTIVATION\"                                                              ## [6] \"REACTOME_TRANSLESION_SYNTHESIS_BY_Y_FAMILY_DNA_POLYMERASES_BYPASSES_LESIONS_ON_DNA_TEMPLATE\" unique(enrichment_df$experiment) ## [1] \"protein_coding\"          \"unproductive\"            ## [3] \"retained_intron\"         \"processed_transcript\"    ## [5] \"nonsense_mediated_decay\" enrichment_df |>   dplyr::filter(     experiment %in% c(\"protein_coding\", \"unproductive\") & abs(NES) >= 2   ) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 30) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"mako\", direction = -1) enrichment_df |>   dplyr::filter(!experiment %in% c(\"protein_coding\", \"unproductive\") & abs(NES) > 1.5) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 20) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"magma\", direction = -1)"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"genomic-context-plot","dir":"Articles","previous_headings":"","what":"Genomic Context Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One main issues arrived start isoform level analysis, easy direct way visualize transcript-types compared one another, using transcript-type transcript per million information. alignment plots today use outputs .bam/.sam files align directly genome making us lose transcript-type information increasing considerably processing time analysis size files time takes re-align. solve problem used direct approach allows us visualize difference introns exons transcript, types transcripts much counted according pseudo-alignment; turn loses read alignment count proportion. alignment count unfortunately requires running alignment softwares dealing .sam .bam files covered tutorial. called plot genomic context plot takes inspiration way Ensembl shows transcripts genome browser. specific plot requires GFF file can also downloaded GENCODE included file path next function. GFF file needs downloaded accurate version transcriptome, case v33. Plotting context FLT1 isoforms.","code":"gff_file <- download_reference(version = \"33\", file_type = \"gff\") context_data <- create_context_data(   gff_file = gff_file,   organism = \"Homo sapiens\",   orgdb_package = \"org.Hs.eg.db\",   bsgenome_package = \"BSgenome.Hsapiens.NCBI.GRCh38\" ) plot_genomic_context(   gene_name = \"FLT1\",   context_data = context_data )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"protein-coding-example","dir":"Articles","previous_headings":"Genomic Context Plot","what":"Protein coding example","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Expanding context around genomic region interest.","code":"plot_genomic_context(   gene_name = \"EGFR\",   context_data = context_data,   y_offset = 4.5,   height_offset = 1 ) plot_genomic_context(   gene_name = \"XIST\",   context_data = context_data,   y_offset = 0,   height_offset = 1.5,   upstream_offset = 100000 ) plot_genomic_context(   gene_name = \"TSIX\",   context_data = context_data,   y_offset = 0,   height_offset = 0.5,   downstream_offset = 100000 )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic-intro.html","id":"session-information","dir":"Articles","previous_headings":"Genomic Context Plot","what":"Session Information","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"","code":"sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Tahoe 26.0.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] GenomicRanges_1.61.1 Seqinfo_0.99.2       IRanges_2.43.0       ##  [4] S4Vectors_0.47.0     BiocGenerics_0.55.1  generics_0.1.4       ##  [7] ggplot2_4.0.0        stringr_1.5.2        tidyr_1.3.1          ## [10] dplyr_1.1.4          readr_2.1.5          fs_1.6.6             ## [13] isoformic_0.1.2.9013 ##  ## loaded via a namespace (and not attached): ##   [1] strawr_0.0.92                            ##   [2] RColorBrewer_1.1-3                       ##   [3] jsonlite_2.0.0                           ##   [4] magrittr_2.0.4                           ##   [5] GenomicFeatures_1.61.6                   ##   [6] farver_2.1.2                             ##   [7] rmarkdown_2.30                           ##   [8] BiocIO_1.19.0                            ##   [9] ragg_1.5.0                               ##  [10] vctrs_0.6.5                              ##  [11] memoise_2.0.1                            ##  [12] Rsamtools_2.25.2                         ##  [13] RCurl_1.98-1.17                          ##  [14] rstatix_0.7.2                            ##  [15] htmltools_0.5.8.1                        ##  [16] S4Arrays_1.9.1                           ##  [17] progress_1.2.3                           ##  [18] AnnotationHub_3.99.6                     ##  [19] curl_7.0.0                               ##  [20] broom_1.0.10                             ##  [21] Rhdf5lib_1.31.0                          ##  [22] rhdf5_2.53.3                             ##  [23] gridGraphics_0.5-1                       ##  [24] SparseArray_1.9.1                        ##  [25] Formula_1.2-5                            ##  [26] sass_0.4.10                              ##  [27] bslib_0.9.0                              ##  [28] htmlwidgets_1.6.4                        ##  [29] desc_1.4.3                               ##  [30] httr2_1.2.1                              ##  [31] cachem_1.1.0                             ##  [32] GenomicAlignments_1.45.2                 ##  [33] lifecycle_1.0.4                          ##  [34] pkgconfig_2.0.3                          ##  [35] Matrix_1.7-4                             ##  [36] R6_2.6.1                                 ##  [37] fastmap_1.2.0                            ##  [38] GenomeInfoDbData_1.2.14                  ##  [39] MatrixGenerics_1.21.0                    ##  [40] digest_0.6.37                            ##  [41] patchwork_1.3.2                          ##  [42] AnnotationDbi_1.71.1                     ##  [43] textshaping_1.0.4                        ##  [44] RSQLite_2.4.3                            ##  [45] org.Hs.eg.db_3.21.0                      ##  [46] ggpubr_0.6.2                             ##  [47] filelock_1.0.3                           ##  [48] labeling_0.4.3                           ##  [49] httr_1.4.7                               ##  [50] abind_1.4-8                              ##  [51] compiler_4.5.1                           ##  [52] bit64_4.6.0-1                            ##  [53] withr_3.0.2                              ##  [54] S7_0.2.0                                 ##  [55] backports_1.5.0                          ##  [56] BiocParallel_1.43.4                      ##  [57] carData_3.0-5                            ##  [58] viridis_0.6.5                            ##  [59] DBI_1.2.3                                ##  [60] ggsignif_0.6.4                           ##  [61] biomaRt_2.64.0                           ##  [62] rappdirs_0.3.3                           ##  [63] DelayedArray_0.34.1                      ##  [64] rjson_0.2.23                             ##  [65] tools_4.5.1                              ##  [66] glue_1.8.0                               ##  [67] restfulr_0.0.16                          ##  [68] rhdf5filters_1.21.0                      ##  [69] grid_4.5.1                               ##  [70] fgsea_1.35.6                             ##  [71] gtable_0.3.6                             ##  [72] tzdb_0.5.0                               ##  [73] data.table_1.17.8                        ##  [74] hms_1.1.4                                ##  [75] xml2_1.4.0                               ##  [76] car_3.1-3                                ##  [77] utf8_1.2.6                               ##  [78] XVector_0.49.0                           ##  [79] BiocVersion_3.22.0                       ##  [80] ggrepel_0.9.6                            ##  [81] pillar_1.11.1                            ##  [82] yulab.utils_0.2.1                        ##  [83] vroom_1.6.6                              ##  [84] BiocFileCache_2.99.5                     ##  [85] lattice_0.22-7                           ##  [86] rtracklayer_1.69.1                       ##  [87] bit_4.6.0                                ##  [88] tidyselect_1.2.1                         ##  [89] Biostrings_2.77.2                        ##  [90] knitr_1.50                               ##  [91] gridExtra_2.3                            ##  [92] SummarizedExperiment_1.39.1              ##  [93] xfun_0.53                                ##  [94] Biobase_2.69.0                           ##  [95] matrixStats_1.5.0                        ##  [96] stringi_1.8.7                            ##  [97] UCSC.utils_1.5.0                         ##  [98] yaml_2.3.10                              ##  [99] TxDb.Hsapiens.UCSC.hg38.knownGene_3.21.0 ## [100] evaluate_1.0.5                           ## [101] codetools_0.2-20                         ## [102] tibble_3.3.0                             ## [103] BiocManager_1.30.26                      ## [104] ggplotify_0.1.3                          ## [105] cli_3.6.5                                ## [106] systemfonts_1.3.1                        ## [107] jquerylib_0.1.4                          ## [108] Rcpp_1.1.0                               ## [109] GenomeInfoDb_1.45.9                      ## [110] dbplyr_2.5.1                             ## [111] png_0.1-8                                ## [112] XML_3.99-0.19                            ## [113] parallel_4.5.1                           ## [114] pkgdown_2.1.3                            ## [115] blob_1.2.4                               ## [116] prettyunits_1.2.0                        ## [117] plyranges_1.28.0                         ## [118] bitops_1.0-9                             ## [119] txdbmaker_1.4.2                          ## [120] viridisLite_0.4.2                        ## [121] scales_1.4.0                             ## [122] plotgardener_1.14.0                      ## [123] purrr_1.1.0                              ## [124] crayon_1.5.3                             ## [125] rlang_1.1.6                              ## [126] cowplot_1.2.0                            ## [127] fastmatch_1.1-6                          ## [128] KEGGREST_1.49.1"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_index.html","id":"table-of-content","dir":"Articles","previous_headings":"","what":"Table of content","title":"Isoformic - Vignettes Index","text":"Introduction End--end workflow Reference Annotation Pre-processing reads","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"the-isoformic-method","dir":"Articles","previous_headings":"","what":"The Isoformic method","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Welcome isoformic, workflow isoform-level biological interpretation transcriptomic data.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"information","dir":"Articles","previous_headings":"The Isoformic method","what":"Information","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"data used examples extracted paper: “Landscape Dysregulated Placental RNA Editing Associated Preeclampsia” analyzed generated RNA-Seq datasets preeclamptic control placentas. dataset chosen due many biological replicates high sequencing depth. Load dependency packages","code":"# devtools::load_all() library(isoformic) library(fs) library(readr) library(dplyr) library(tidyr) library(stringr) library(ggplot2)"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"initial-considerations","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Initial Considerations","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"highly recommend use Salmon transcript-level abundance estimation swish method implemented fishpond R package isoform-level differential expression. GENCODE project offers good annotation isoforms human mouse genomes, including isoforms non-coding genes. Using sources annotation can render completely different results following analysis.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"part-1-data-input","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 1: Data input","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"version need two essential input two optional inputs. Essential input 1: transcript differential expression table. table can outputted kind differential expression software use needs contain 1) information Transcript name Ensembl Transcript ID per line 2) log2FoldChange information column named “log2FoldChange”. 3) p-value information column named “pvalue”. columns table used main analysis. DET table UNFILTERED version table. Example: Essential input 2: FASTA file GENCODE corresponds fasta used transcriptome alignment. need version since use names GENCODE version mergings. annotation used also need GENCODE since posses transcript_type column used information well. wish CAN provide information external source GENCODE, need table least three columns: 1)transcript_name column needs match gene names DET table TPM table, 2) gene-name column tell gene transcripts belong 3) transcript_type column. table also use transcript names GENCODE column stating transcript biotype also got GENCODE annotation. statistics can ‘pvalue’, ‘svalue’ ‘qvalue’ ‘log2FoldChange’ case control conditions also needed plots. Optional inputs: 1) Transcript per million (TPM) table matching transcripts differential expression table 2) GFF3 file transcriptome version corresponds FASTA 3) table differentially expressed genes data also use comparison. differential expression table can used pipeline authors, multiple testing, reached conclusion swish implementation differential transcript expression analysis using inferential replicate counts Salmon one performs best medium high depth transcriptome libraries looking number transcripts significant values. well annotated transcriptomes output results tests mentioned done using human data. Isoformic makes available example files can used model formatting necessary files running workflow. files can found following path. files available can seen : load table points libraries represent cases (treatment) controls. library, cases pregnant woman Preeclampsia controls matched pregnant without Preeclampsia.","code":"path_package(\"isoformic\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic PE1_DETs <- read_csv(path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\")) head(PE1_DETs) ## # A tibble: 6 × 4 ##   transcript_id      log2FC  pvalue qvalue ##   <chr>               <dbl>   <dbl>  <dbl> ## 1 ENST00000456328.2 -0.692  0.0199  0.0940 ## 2 ENST00000488147.1  0.0731 0.652   0.812  ## 3 ENST00000466430.5 -0.146  0.364   0.590  ## 4 ENST00000442987.3 -0.183  0.0841  0.242  ## 5 ENST00000494149.2 -0.728  0.00599 0.0420 ## 6 ENST00000595919.1 -0.0789 0.951   0.977 path_package(\"isoformic\", \"extdata\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata path_package(\"isoformic\", \"extdata\") |>   dir_ls() ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/DEGs_PE_fixed2.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/DETs_fixed.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/PE_1_DETs.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/PE_1_counts.csv ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/example_gencode.v34.annotation.gff.gz ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/example_gencode.v34.annotation.parquet ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/hsapiens_REAC_subset.gmt ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/isoformic-logo.png PE1_DETs <- path_package(\"isoformic\", \"extdata\", \"DETs_fixed.csv\") |>   read_csv() PE1_DEGs <- path_package(\"isoformic\", \"extdata\", \"DEGs_PE_fixed2.csv\") |>   read_csv() PE1_counts <- path_package(\"isoformic\", \"extdata\", \"PE_1_counts.csv\") |>   read_csv() |>   dplyr::rename(transcript_id = `...1`) sample_table <- data.frame(   samples = colnames(PE1_counts)[2:ncol(PE1_counts)],   condition = c(rep(\"treatment\", 8), rep(\"control\", ncol(PE1_counts) - 9)) ) head(sample_table) ##       samples condition ## 1 SRR11498039 treatment ## 2 SRR11498040 treatment ## 3 SRR11498041 treatment ## 4 SRR11498042 treatment ## 5 SRR11498043 treatment ## 6 SRR11498044 treatment"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"download-reference-files","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data > Part 1: Data input","what":"Download reference files","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"references used project obtained GENCODE Project version 34 Human genome annotation. annotation file GFF3 format obtained https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_34/gencode.v34.chr_patch_hapl_scaff.annotation.gff3.gz. step may take depending speed internet connection. download mouse references, necessary include letter ‘M’ version string (e.g., “M37”).","code":"download_reference(version = \"34\", file_type = \"fasta\") # download_reference(version = \"34\", file_type = \"gtf\") download_reference(version = \"34\", file_type = \"gff\")"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"part-2-transcript-to-gene-and-gene-to-transcript-reference-tables","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 2: Transcript to Gene and Gene to transcript reference tables","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Using FASTA file GENCODE construct transcript per gene dictionary table add information main DEG, DET TPM table. step depend lot names columns tables Vignette decided change names keep consistency. input used FASTA file containing transcript sequences annotation information downloaded GENCODE website specific version used alignment. case GENCODE v34. header shows imported table still weird tidy, pass make_tx_to_gene function make tidy ready use. Now tx_to_gene table 6 columns order: Ensembl transcript id, Ensembl gene id, Havanna gene id, Havanna transcript id, transcript name, gene name, transcript length transcript type. DEG, DET TPM table need Ensembl gene id, Gene name transcript type information can convert tables transcript_name add type information gene DE DET table. Select columns gene id gene name info First add gene_name information DEG table Now transcript name TPM table DET table main table analysis.","code":"fasta_path <- \"data-raw/gencode.v34.transcripts.fa.gz\" read_lines(fasta_path, n_max = 5) ## [1] \">ENST00000456328.2|ENSG00000223972.5|OTTHUMG00000000961.2|OTTHUMT00000362751.1|DDX11L1-202|DDX11L1|1657|processed_transcript|\" ## [2] \"GTTAACTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGTGTATTTGCTGTC\"                                                                  ## [3] \"TCTTAGCCCAGACTTCCCGTGTCCTTTCCACCGGGCCTTTGAGAGGTCACAGGGTCTTGA\"                                                                  ## [4] \"TGCTGTGGTCTTCATCTGCAGGTGTCTGACTTCCAGCAACTGCTGGCCTGTGCCAGGGTG\"                                                                  ## [5] \"CAAGCTGAGCACTGGAGTGGAGTTTTCCTGTGGAGAGGAGCCATGCCTAGAGTGGGATGG\" tx_to_gene <- make_tx_to_gene(   file_path = fasta_path,   file_type = \"fasta\" ) head(tx_to_gene) ## # A tibble: 6 × 8 ##   transcript_id    gene_id havanna_gene_id havanna_transcript_id transcript_name ##   <chr>            <chr>   <chr>           <chr>                 <chr>           ## 1 ENST00000456328… ENSG00… OTTHUMG0000000… OTTHUMT00000362751.1  DDX11L1-202     ## 2 ENST00000450305… ENSG00… OTTHUMG0000000… OTTHUMT00000002844.2  DDX11L1-201     ## 3 ENST00000488147… ENSG00… OTTHUMG0000000… OTTHUMT00000002839.1  WASH7P-201      ## 4 ENST00000619216… ENSG00… -               -                     MIR6859-1-201   ## 5 ENST00000473358… ENSG00… OTTHUMG0000000… OTTHUMT00000002840.1  MIR1302-2HG-202 ## 6 ENST00000469289… ENSG00… OTTHUMG0000000… OTTHUMT00000002841.2  MIR1302-2HG-201 ## # ℹ 3 more variables: gene_name <chr>, tx_length <chr>, transcript_type <chr> tx_to_gene <- tx_to_gene |>   dplyr::select(     transcript_id, gene_id,     transcript_name, gene_name,     transcript_type   ) gene_join <- tx_to_gene |>   dplyr::select(gene_id, gene_name) |>   distinct() PE1_DEGs <- PE1_DEGs |>   left_join(gene_join, by = \"gene_id\") tpm_join <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name) |>   distinct() PE1_counts <- PE1_counts |>   left_join(tpm_join, by = c(\"transcript_id\"))"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"part-3-constructing-the-main-table","dir":"Articles","previous_headings":"The Isoformic method > Setting up the data","what":"Part 3: Constructing the main table","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Gene-level information input us categorical values added DET table. detail: need now transcript’s gene (1) pass gene-level expression cutoff values (2) type transcript belongs . multiple types Ensembl library definitions superpose one another, ones analyzed can seen figure  First add transcript name type information DET table gene expression level convert DEG table cutting get genes present DE exclude possible noise. used cutoffs absolute log2FC higher one pvalue lower 0.05 first filter DEG table significant ones add column main DET table using isDEGsig function. now tables need graphs analyses. One detail DET final table now allows us see genes whose transcripts differentially expressed genes simple dplyr filter. table represent cases characterized isoform switches, two transcripts gene expressed opposite directions makes total expression gene significant either -regulated.","code":"knitr::include_graphics(\"https://i.imgur.com/UWoAr0k.png\") transcript_joined <- tx_to_gene |>   dplyr::select(transcript_id, transcript_name, transcript_type) |>   dplyr::distinct() PE1_DETs <- PE1_DETs |>   dplyr::left_join(transcript_joined, by = \"transcript_id\") PE1_DEGs_new_names_sig <- PE1_DEGs |>   filter(abs(log2FC) >= 1) |>   filter(pvalue <= 0.05) |>   dplyr::select(gene_name) |>   tidyr::drop_na() DEGs_sig_joined <- PE1_DEGs_new_names_sig |>   left_join(tx_to_gene, by = \"gene_name\") transcript_gene_join <- tx_to_gene |>   dplyr::select(transcript_name, gene_name) |>   dplyr::distinct() PE1_DETs_final <- is_deg_sig(DEGs_sig_joined$transcript_name, PE1_DETs) PE1_DETs_final <- PE1_DETs_final |>   left_join(transcript_gene_join, by = \"transcript_name\") DETs_not_DEGs <- PE1_DETs_final |>   filter(pvalue < 0.05, abs(log2FC) > 1, DEG_sig == \"NO\")"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"colors","dir":"Articles","previous_headings":"","what":"Colors","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"start plotting define general set colors used entire pipeline associated certain type transcript. colored abundant types separately less abundant grey tone name vector accordingly","code":"# TODO: @luciorq Check implementation of function `tx_type_palette()` fixed_tx_biotypes <- c(   \"gene\", \"protein_coding\",   \"retained_intron\", \"protein_coding_CDS_not_defined\",   \"nonsense_mediated_decay\", \"lncRNA\",   \"processed_pseudogene\", \"transcribed_unprocessed_pseudogene\",   \"unprocessed_pseudogene\", \"non_stop_decay\",   \"transcribed_unitary_pseudogene\", \"pseudogene\",   \"unitary_pseudogene\", \"processed_transcript\" )  tx_type_color_names <- c(   \"#fb8072\", \"#a6d854\",   \"#8da0cb\", \"#fc8d62\",   \"#66c2a5\", \"#e78ac3\",   \"#ffd92f\", \"#e5c494\",   \"#d9d9d9\", \"#d9d9d9\",   \"#d9d9d9\", \"#ffffb3\",   \"#d9d9d9\", \"#d9d9d9\" )  names(tx_type_color_names) <- fixed_tx_biotypes  tx_type_color_names"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"log2fc-plot","dir":"Articles","previous_headings":"","what":"Log2FC Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"simplest first plot tutorial log2FC plot, plot compare foldchange case vs control gene, transcripts adding significance information. make combined version DEG table DET table using function join_DEG_DET. Now just use plotLog2FC gene like. function also works well small vector gene_names.","code":"DEG_DET_table <- join_DEG_DET(PE1_DEGs, PE1_DETs_final, 1, 0.05) head(DEG_DET_table) ## # A tibble: 6 × 10 ##   id             log2FC pvalue qvalue name  transcript_type gene_name abs_log2FC ##   <chr>           <dbl>  <dbl>  <dbl> <chr> <chr>           <chr>          <dbl> ## 1 ENSG00000000… -0.320  0.0485  0.125 TSPA… gene            TSPAN6        0.320  ## 2 ENSG00000000…  0.381  0.107   0.222 TNMD  gene            TNMD          0.381  ## 3 ENSG00000000… -0.0693 0.260   0.417 DPM1  gene            DPM1          0.0693 ## 4 ENSG00000000…  0.107  0.386   0.547 SCYL3 gene            SCYL3         0.107  ## 5 ENSG00000000…  0.162  0.229   0.380 C1or… gene            C1orf112      0.162  ## 6 ENSG00000000… -0.162  0.160   0.296 FGR   gene            FGR           0.162  ## # ℹ 2 more variables: significance <chr>, DEG_sig <chr> # selected_gene = \"RBPJ\" plot_log2FC(DEG_DET_table, \"RBPJ\") # Work here to look better? or just remove for now # the best would be a loop that goes over each one of a list and # plots them in a folder the default could be the DET not deg table plot_obj <- plot_log2FC(DEG_DET_table, c(\"RBPJ\", \"EGFR\", \"PNCK\"))  plot_obj +   theme_classic() +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"profile-plot","dir":"Articles","previous_headings":"","what":"Profile Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Another good quantifiable way visualize switch using Transcript per Million Count transcript, compared gene case control conditions. use profile plot one size plots values TPM case conditions value TPM control conditions.","code":"DEG_DET_table |>   filter(!transcript_type %in% \"gene\") ## # A tibble: 70,870 × 10 ##    id          log2FC  pvalue  qvalue name  transcript_type gene_name abs_log2FC ##    <chr>        <dbl>   <dbl>   <dbl> <chr> <chr>           <chr>          <dbl> ##  1 ENST000006…  0.640 3.11e-1 5.40e-1 ISG1… protein_coding  ISG15          0.640 ##  2 ENST000003…  0.534 1.29e-2 7.07e-2 AGRN… protein_coding  AGRN           0.534 ##  3 ENST000004… -0.530 5.81e-2 1.91e-1 AGRN… retained_intron AGRN           0.530 ##  4 ENST000004…  1.83  1.66e-5 6.81e-4 RNF2… protein_coding  RNF223         1.83  ##  5 ENST000004…  0.415 2.20e-1 4.40e-1 TNFR… retained_intron TNFRSF4        0.415 ##  6 ENST000003…  0.374 2.27e-1 4.48e-1 TNFR… protein_coding  TNFRSF4        0.374 ##  7 ENST000003…  0.479 6.70e-2 2.09e-1 TAS1… protein_coding  TAS1R3         0.479 ##  8 ENST000003…  0.217 3.82e-1 6.06e-1 DVL1… protein_coding  DVL1           0.217 ##  9 ENST000003…  0.570 8.12e-2 2.37e-1 DVL1… protein_coding  DVL1           0.570 ## 10 ENST000006…  1.91  4.34e-1 6.52e-1 DVL1… protein_coding  DVL1           1.91  ## # ℹ 70,860 more rows ## # ℹ 2 more variables: significance <chr>, DEG_sig <chr> unique(DEG_DET_table$transcript_type) ##  [1] \"gene\"                               \"protein_coding\"                     ##  [3] \"retained_intron\"                    \"processed_transcript\"               ##  [5] \"lncRNA\"                             \"nonsense_mediated_decay\"            ##  [7] \"processed_pseudogene\"               \"unprocessed_pseudogene\"             ##  [9] \"transcribed_unprocessed_pseudogene\" \"non_stop_decay\"                     ## [11] \"transcribed_unitary_pseudogene\"     \"pseudogene\"                         ## [13] \"unitary_pseudogene\" profile_data_df <- prepare_profile_data(   txi_transcript = PE1_counts,   tx_to_gene = tx_to_gene,   sample_metadata = sample_table,   de_result_gene = PE1_DEGs,   de_result_transcript = PE1_DETs,   var = \"condition\",   var_levels = c(\"control\", \"treatment\") ) # # # Create output directory if don't exist yet # path_to_save <- \"results/profile_plot\" # fs::dir_create(path_to_save)  profile_plot <- plot_tx_expr(   genes_to_plot = \"RBPJ\",   profile_data = profile_data_df ) profile_plot profile_data_df |>   filter(genename %in% \"IL2RA\") ## # A tibble: 2 × 7 ##   genename condition mean_TPM    SD transcript_type DE    parent_gene ##   <chr>    <fct>        <dbl> <dbl> <chr>           <fct> <chr>       ## 1 IL2RA    control       32.5 14.5  gene            Yes   genename    ## 2 IL2RA    treatment     11.8  9.04 gene            Yes   genename profile_plot <- plot_tx_expr(   genes_to_plot = \"IL2RA\",   profile_data = profile_data_df ) profile_plot"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"functional-transcript-enrichment","dir":"Articles","previous_headings":"","what":"Functional Transcript Enrichment","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One biggest caveats transcript level analysis many times hard extract biologically relevant information much data. Instead final table 900 genes get table 3.000 transcripts differential expression cut. next step gene-level DE functional enrichment assigning genes metabolic pathways may regulating. Unfortunately comprehensive datasets pathways transcripts may regulating gene level analyses normally loses difference transcripts can produce proteins (protein_coding) canonical translation pathways . solve problem developed method expanding known .gmts transcript information separately enrich selected category transcript. alternative spliced isoforms code canonical proteins abundant classified Nonsense-mediated decay, premature stop codon subject targeted degradation Protein coding CDS defined (formerly identified “processed transcript”), , reason, possess complete Open Reading Frame. Inside processed transcript category one highest count Retained introns, sequences retain intronic portion processing. three categories abundant transcripts arise alternative splicing protein coding gene three main focus enrichment graphs. first choose .gmt used enrichment, case loaded human reactome gene list MSigDB called c2. gene list GMT format works . gmt loaded fgsea format lists biological process. Visualize table running run run_enrichment() function needs DETs final table, gene set list p-value cutoff used. generate table enrichment extra column “experiment”. experiment column five possible values: Protein-coding: enrichment associated transcripts categorized protein coding. Unproductive: term used moving forward combine three categories alternative spliced isoforms transcribed coding genes. authors aware biologically term deprecated since kind transcripts can produce peptides alternative translation pathways. unproductive read virtually incapable producing protein associated gene. interpretation, made category find pathways regulated coding data, unproductive transcripts. also added three categories individual alternative spliced types pathways regulated specific analysis. deep transcriptome individual enrichment categories can also lead promising insights. Plotting enrichment used LollipopPlot plot enrichments side side size pathway radius circles transparency pathway passes desired cutoff. First plot Protein_coding versus Unproductive extringent NES cutoff.  now specific unproductive subtypes","code":"fs::path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") ## /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpwoIG2f/temp_libpathedcf4f41b3f9/isoformic/extdata/c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt genesets_list <- fgsea::gmtPathways(   gmt.file = fs::path_package(\"isoformic\", \"extdata\", \"c2.cp.reactome.v2023.1.Hs.symbols.gmt.txt\") )  head(str(genesets_list[1:5])) ## List of 5 ##  $ REACTOME_INTERLEUKIN_6_SIGNALING        : chr [1:11] \"JAK2\" \"TYK2\" \"CBL\" \"STAT1\" ... ##  $ REACTOME_APOPTOSIS                      : chr [1:179] \"BAD\" \"CFLAR\" \"PSMB1\" \"PSMC4\" ... ##  $ REACTOME_HEMOSTASIS                     : chr [1:678] \"FGR\" \"CD99\" \"TFPI\" \"KDM1A\" ... ##  $ REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS: chr [1:55] \"BAD\" \"BID\" \"BAK1\" \"CASP8\" ... ##  $ REACTOME_MAPK3_ERK1_ACTIVATION          : chr [1:10] \"JAK2\" \"MAPK3\" \"TYK2\" \"IL6ST\" ... ## NULL head(genesets_list[[1]]) ## [1] \"JAK2\"  \"TYK2\"  \"CBL\"   \"STAT1\" \"IL6ST\" \"IL6\" head(PE1_DETs_final) ## # A tibble: 6 × 8 ##   transcript_id   log2FC  pvalue  qvalue transcript_name transcript_type DEG_sig ##   <chr>            <dbl>   <dbl>   <dbl> <chr>           <chr>           <chr>   ## 1 ENST0000064952…  0.640 3.11e-1 5.40e-1 ISG15-203       protein_coding  YES     ## 2 ENST0000037937…  0.534 1.29e-2 7.07e-2 AGRN-201        protein_coding  YES     ## 3 ENST0000046111… -0.530 5.81e-2 1.91e-1 AGRN-202        retained_intron YES     ## 4 ENST0000045346…  1.83  1.66e-5 6.81e-4 RNF223-201      protein_coding  YES     ## 5 ENST0000049786…  0.415 2.20e-1 4.40e-1 TNFRSF4-203     retained_intron YES     ## 6 ENST0000037923…  0.374 2.27e-1 4.48e-1 TNFRSF4-201     protein_coding  YES     ## # ℹ 1 more variable: gene_name <chr> enrichment_df <- run_enrichment(   det_df = PE1_DETs_final,   genesets_list = genesets_list,   tx_to_gene = tx_to_gene,   pval_cutoff = 0.05 ) head(enrichment_df) ##                                                         pathway         pval ##                                                          <char>        <num> ## 1:              REACTOME_ABC_FAMILY_PROTEINS_MEDIATED_TRANSPORT 0.0025381836 ## 2:                           REACTOME_ABC_TRANSPORTER_DISORDERS 0.0182832492 ## 3: REACTOME_ACROSOME_REACTION_AND_SPERM_OOCYTE_MEMBRANE_BINDING 0.0224136073 ## 4:       REACTOME_ACTIVATED_NTRK2_SIGNALS_THROUGH_FRS2_AND_FRS3 0.0437500000 ## 5:                REACTOME_ACTIVATED_NTRK2_SIGNALS_THROUGH_PI3K 0.0006616736 ## 6:                 REACTOME_ACTIVATED_NTRK2_SIGNALS_THROUGH_RAS 0.0041758237 ##          padj   log2err        ES      NES  size ##         <num>     <num>     <num>    <num> <int> ## 1: 0.04818654 0.4317077 0.3725212 1.465466   263 ## 2: 0.14031331 0.3524879 0.3614713 1.381439   196 ## 3: 0.16008590 0.3524879 0.8512491 1.565424     5 ## 4: 0.24806701 0.2712886 0.5351451 1.488537    26 ## 5: 0.02426137 0.4772708 0.7292574 1.880501    19 ## 6: 0.06500103 0.4070179 0.6460168 1.777428    24 ##                                                        leadingEdge ##                                                             <list> ## 1:     OS9-209,PSMD7-204,PSMA5-206,UBC-205,ABCB1-201,UBA52-201,... ## 2:    OS9-209,PSMD7-204,PSMA5-206,UBC-205,UBA52-201,ERLIN2-206,... ## 3:                                 CD9-208,CD9-216,CD9-212,CD9-204 ## 4:     NTRK2-208,NTRK2-204,NTF4-203,NTF4-201,FRS2-206,FRS3-201,... ## 5: NTRK2-208,PIK3R1-202,PIK3R1-216,NTRK2-204,NTF4-203,GAB1-201,... ## 6:                  NTRK2-208,NTRK2-204,NTF4-203,NTF4-201,SHC1-208 ##        experiment ##            <char> ## 1: protein_coding ## 2: protein_coding ## 3: protein_coding ## 4: protein_coding ## 5: protein_coding ## 6: protein_coding head(names(genesets_list)) ## [1] \"REACTOME_INTERLEUKIN_6_SIGNALING\"                                                            ## [2] \"REACTOME_APOPTOSIS\"                                                                          ## [3] \"REACTOME_HEMOSTASIS\"                                                                         ## [4] \"REACTOME_INTRINSIC_PATHWAY_FOR_APOPTOSIS\"                                                    ## [5] \"REACTOME_MAPK3_ERK1_ACTIVATION\"                                                              ## [6] \"REACTOME_TRANSLESION_SYNTHESIS_BY_Y_FAMILY_DNA_POLYMERASES_BYPASSES_LESIONS_ON_DNA_TEMPLATE\" unique(enrichment_df$experiment) ## [1] \"protein_coding\"          \"unproductive\"            ## [3] \"retained_intron\"         \"processed_transcript\"    ## [5] \"nonsense_mediated_decay\" enrichment_df |>   dplyr::filter(     experiment %in% c(\"protein_coding\", \"unproductive\") & abs(NES) >= 2   ) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 30) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"mako\", direction = -1) enrichment_df |>   dplyr::filter(!experiment %in% c(\"protein_coding\", \"unproductive\") & abs(NES) > 1.5) |>   dplyr::arrange(padj) |>   dplyr::slice_head(n = 20) |>   ggplot2::ggplot(ggplot2::aes(pathway, experiment)) +   ggplot2::geom_point(ggplot2::aes(col = NES, size = size)) +   ggplot2::coord_flip() +   ggplot2::theme_minimal() +   viridis::scale_color_viridis(option = \"magma\", direction = -1)"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"genomic-context-plot","dir":"Articles","previous_headings":"","what":"Genomic Context Plot","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"One main issues arrived start isoform level analysis, easy direct way visualize transcript-types compared one another, using transcript-type transcript per million information. alignment plots today use outputs .bam/.sam files align directly genome making us lose transcript-type information increasing considerably processing time analysis size files time takes re-align. solve problem used direct approach allows us visualize difference introns exons transcript, types transcripts much counted according pseudo-alignment; turn loses read alignment count proportion. alignment count unfortunately requires running alignment softwares dealing .sam .bam files covered tutorial. called plot genomic context plot takes inspiration way Ensembl shows transcripts genome browser. specific plot requires GFF file can also downloaded GENCODE included file path next function. GFF file needs downloaded accurate version transcriptome, case v34. Plotting context FLT1 isoforms.","code":"context_data <- create_context_data(   gff_file = \"data-raw/gencode.v34.annotation.gff3.gz\",   organism = \"Homo sapiens\",   orgdb_package = \"org.Hs.eg.db\",   bsgenome_package = \"BSgenome.Hsapiens.NCBI.GRCh38\" ) plot_genomic_context(   gene_name = \"FLT1\",   context_data = context_data )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"protein-coding-example","dir":"Articles","previous_headings":"Genomic Context Plot","what":"Protein coding example","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"Expanding context around genomic region interest.","code":"plot_genomic_context(   gene_name = \"EGFR\",   context_data = context_data,   y_offset = 4.5,   height_offset = 1 ) plot_genomic_context(   gene_name = \"XIST\",   context_data = context_data,   y_offset = 0,   height_offset = 1.5,   upstream_offset = 100000 ) plot_genomic_context(   gene_name = \"TSIX\",   context_data = context_data,   y_offset = 0,   height_offset = 0.5,   downstream_offset = 100000 )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_intro.html","id":"session-information","dir":"Articles","previous_headings":"Genomic Context Plot","what":"Session Information","title":"Isoformic: Isoform-level biological interpretation of transcriptomic data","text":"","code":"sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.6 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] GenomicRanges_1.61.1 Seqinfo_0.99.2       IRanges_2.43.0       ##  [4] S4Vectors_0.47.0     BiocGenerics_0.55.1  generics_0.1.4       ##  [7] ggplot2_4.0.0        stringr_1.5.2        tidyr_1.3.1          ## [10] dplyr_1.1.4          readr_2.1.5          fs_1.6.6             ## [13] isoformic_0.1.2      ##  ## loaded via a namespace (and not attached): ##   [1] strawr_0.0.92                            ##   [2] RColorBrewer_1.1-3                       ##   [3] jsonlite_2.0.0                           ##   [4] magrittr_2.0.4                           ##   [5] GenomicFeatures_1.61.6                   ##   [6] farver_2.1.2                             ##   [7] rmarkdown_2.30                           ##   [8] BiocIO_1.19.0                            ##   [9] ragg_1.5.0                               ##  [10] vctrs_0.6.5                              ##  [11] memoise_2.0.1                            ##  [12] Rsamtools_2.25.2                         ##  [13] RCurl_1.98-1.17                          ##  [14] rstatix_0.7.2                            ##  [15] htmltools_0.5.8.1                        ##  [16] S4Arrays_1.9.1                           ##  [17] forcats_1.0.1                            ##  [18] progress_1.2.3                           ##  [19] AnnotationHub_3.99.6                     ##  [20] curl_7.0.0                               ##  [21] broom_1.0.10                             ##  [22] Rhdf5lib_1.31.0                          ##  [23] rhdf5_2.53.3                             ##  [24] gridGraphics_0.5-1                       ##  [25] SparseArray_1.9.1                        ##  [26] Formula_1.2-5                            ##  [27] sass_0.4.10                              ##  [28] bslib_0.9.0                              ##  [29] htmlwidgets_1.6.4                        ##  [30] desc_1.4.3                               ##  [31] httr2_1.2.1                              ##  [32] cachem_1.1.0                             ##  [33] GenomicAlignments_1.45.2                 ##  [34] lifecycle_1.0.4                          ##  [35] pkgconfig_2.0.3                          ##  [36] Matrix_1.7-4                             ##  [37] R6_2.6.1                                 ##  [38] fastmap_1.2.0                            ##  [39] GenomeInfoDbData_1.2.14                  ##  [40] MatrixGenerics_1.21.0                    ##  [41] digest_0.6.37                            ##  [42] AnnotationDbi_1.71.1                     ##  [43] textshaping_1.0.3                        ##  [44] RSQLite_2.4.3                            ##  [45] org.Hs.eg.db_3.21.0                      ##  [46] ggpubr_0.6.1                             ##  [47] filelock_1.0.3                           ##  [48] labeling_0.4.3                           ##  [49] httr_1.4.7                               ##  [50] abind_1.4-8                              ##  [51] compiler_4.5.1                           ##  [52] bit64_4.6.0-1                            ##  [53] withr_3.0.2                              ##  [54] S7_0.2.0                                 ##  [55] backports_1.5.0                          ##  [56] BiocParallel_1.43.4                      ##  [57] carData_3.0-5                            ##  [58] viridis_0.6.5                            ##  [59] DBI_1.2.3                                ##  [60] ggsignif_0.6.4                           ##  [61] biomaRt_2.64.0                           ##  [62] rappdirs_0.3.3                           ##  [63] DelayedArray_0.34.1                      ##  [64] rjson_0.2.23                             ##  [65] tools_4.5.1                              ##  [66] glue_1.8.0                               ##  [67] restfulr_0.0.16                          ##  [68] rhdf5filters_1.21.0                      ##  [69] grid_4.5.1                               ##  [70] fgsea_1.35.6                             ##  [71] gtable_0.3.6                             ##  [72] tzdb_0.5.0                               ##  [73] data.table_1.17.8                        ##  [74] hms_1.1.3                                ##  [75] xml2_1.4.0                               ##  [76] car_3.1-3                                ##  [77] utf8_1.2.6                               ##  [78] XVector_0.49.0                           ##  [79] BiocVersion_3.22.0                       ##  [80] ggrepel_0.9.6                            ##  [81] pillar_1.11.1                            ##  [82] yulab.utils_0.2.1                        ##  [83] vroom_1.6.6                              ##  [84] BiocFileCache_2.99.5                     ##  [85] lattice_0.22-7                           ##  [86] rtracklayer_1.69.1                       ##  [87] bit_4.6.0                                ##  [88] tidyselect_1.2.1                         ##  [89] Biostrings_2.77.2                        ##  [90] knitr_1.50                               ##  [91] gridExtra_2.3                            ##  [92] SummarizedExperiment_1.39.1              ##  [93] xfun_0.53                                ##  [94] Biobase_2.69.0                           ##  [95] matrixStats_1.5.0                        ##  [96] stringi_1.8.7                            ##  [97] UCSC.utils_1.5.0                         ##  [98] yaml_2.3.10                              ##  [99] TxDb.Hsapiens.UCSC.hg38.knownGene_3.21.0 ## [100] evaluate_1.0.5                           ## [101] codetools_0.2-20                         ## [102] tibble_3.3.0                             ## [103] BiocManager_1.30.26                      ## [104] ggplotify_0.1.3                          ## [105] cli_3.6.5                                ## [106] systemfonts_1.3.1                        ## [107] jquerylib_0.1.4                          ## [108] Rcpp_1.1.0                               ## [109] GenomeInfoDb_1.45.9                      ## [110] dbplyr_2.5.1                             ## [111] png_0.1-8                                ## [112] XML_3.99-0.19                            ## [113] parallel_4.5.1                           ## [114] pkgdown_2.1.3                            ## [115] blob_1.2.4                               ## [116] prettyunits_1.2.0                        ## [117] plyranges_1.28.0                         ## [118] bitops_1.0-9                             ## [119] txdbmaker_1.4.2                          ## [120] viridisLite_0.4.2                        ## [121] scales_1.4.0                             ## [122] plotgardener_1.14.0                      ## [123] purrr_1.1.0                              ## [124] crayon_1.5.3                             ## [125] rlang_1.1.6                              ## [126] cowplot_1.2.0                            ## [127] fastmatch_1.1-6                          ## [128] KEGGREST_1.49.1"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Isoformic - Pre-Processing","text":"highly opinionated example perform RNA-Seq pre-processing quantification focusing estimation o transcript abundance. workflow going use condathis R package. package allow run command line tools like Salmon (Patro et al. 2017). tools can run command line directly.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"note-for-macos-users","dir":"Articles","previous_headings":"Motivation","what":"Note for MacOS users","title":"Isoformic - Pre-Processing","text":"2024-06-09, Bioconda support Arm64 architecture Apple Silicon CPUs. One way bypassing using arguments platform = \"osx-64\" condathis::create_env(), create environment leveraging Rosetta 2 support. option can also added CLI command adding --platform osx-64 conda create command.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"note-for-windows-users","dir":"Articles","previous_headings":"Motivation","what":"Note for Windows users","title":"Isoformic - Pre-Processing","text":"2024-06-09 Bioconda support Windows native installations. Therefore vignette can run, using VM container. best approach running Windows Subsystem Linux, available.","code":""},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"install-salmon-with-condathis","dir":"Articles","previous_headings":"","what":"Install Salmon with {condathis}","title":"Isoformic - Pre-Processing","text":"Check Salmon version: equivalent running CLI.","code":"# pak::pkg_install(\"local::~/projects/condathis\") if (!rlang::is_installed(\"condathis\")) {   pak::pkg_install(\"github::luciorq/condathis\") } library(\"condathis\") if (!condathis::env_exists(env_name = \"salmon-env\")) {   if (fs::dir_exists(fs::path(condathis::get_install_dir(),\"envs\", \"salmon-env\"))) {     fs::dir_delete(fs::path(condathis::get_install_dir(),\"envs\", \"salmon-env\"))   } } # Workaround for ARM CPU based MacOS if (isTRUE(condathis::get_sys_arch())) {   platform_var <- \"osx-64\" } else {   platform_var <- NULL }  condathis::create_env(   packages = \"salmon=1.10.3\",   env_name = \"salmon-env\",   method = \"native\",   platform = platform_var ) condathis::run(   \"salmon\", \"--version\",   env_name = \"salmon-env\" ) salmon 1.10.3 # if MacOS with arm64 CPU add `--platform osx-64` conda create -n salmon-env \\   -c bioconda -c conda-forge -c defaults \\   salmon;"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"salmon-index","dir":"Articles","previous_headings":"Running Salmon with {condathis}","what":"Salmon index","title":"Isoformic - Pre-Processing","text":"CLI command. Salmon index command: Using condathis","code":"salmon index \\   --transcripts <TRANSCRIPTME_FASTA> \\   --index <SALMON_INDEX_DIR> \\   --kmerLen 15 \\   --threads 4 \\   --keepDuplicates; base_dir <- fs::path_temp(\"isoformic\") reference_version <- \"46\" download_reference(   version = reference_version,   reference = \"gencode\",   file_type = \"fasta\",   organism = \"human\",   output_path = base_dir ) txome_fasta_path <- fs::path(base_dir, paste0(\"gencode.v\", reference_version, \".transcripts.fa.gz\")) salmon_index_path <- fs::path(base_dir, paste0(\"salmon_index_gencode_v\", reference_version)) if (!fs::dir_exists(salmon_index_path) {   fs::dir_create(salmon_index_path) } num_threads <- 4 condathis::run(   \"salmon\", \"index\",   \"--transcripts\", txome_fasta_path,   \"--index\", salmon_index_path,   \"--kmerLen\", 15,   \"--threads\", num_threads,   \"--keepDuplicates\",   env_name = \"salmon-env\" )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"salmon-quant","dir":"Articles","previous_headings":"Running Salmon with {condathis}","what":"Salmon Quant","title":"Isoformic - Pre-Processing","text":"Salmon quant command: Using condathis","code":"salmon \\   quant \\   --libType A \\   --index <SALMON_INDEX_PATH> \\   --mates1 <FASTQ_R1> \\   --mates2 <FASTQ_R2> \\   --output <SALMON_OUTPUT_PATH> \\   --threads {threads} \\   --softclip \\   --softclipOverhangs \\   --disableChainingHeuristic \\   --dumpEq \\   --dumpEqWeights \\   --posBias \\   --seqBias \\   --gcBias \\   --useVBOpt \\   --rangeFactorizationBins 8 \\   --thinningFactor 100 \\   --validateMappings \\   --writeMappings={output.quant_dir}/txome_align.sam \\   --minScoreFraction 0.65 \\   --numGibbsSamples 100 2>&1 | tee -a {log}; salmon_quant_path <- fs::path(base_dir, \"salmon_quant\") if (!fs::dir_exists(salmon_quant_path)) {   fs::dir_create(salmon_quant_path) } reads_path <- c(   fs::path(\"data-raw/sample_R1.fastq.gz\"),   fs::path(\"data-raw/sample_R2.fastq.gz\") )  condathis::run(   \"salmon\", \"quant\",   \"--libType\", \"A\",   \"--index\", salmon_index_path,   \"--mates1\", reads_path[1],   \"--mates2\", reads_path[2],   \"--output\", salmon_quant_path,   \"--numGibbsSamples\", 20,   \"--posBias\",   \"--seqBias\",   \"--gcBias\",   \"--threads\", num_threads,   \"--softclip\",   \"--softclipOverhangs\",   \"--disableChainingHeuristic\",   \"--dumpEq\",   \"--useVBOpt\",   \"--validateMappings\",   \"--minAssignedFrags\", 1,   \"--minScoreFraction\", \"0.65\",   env_name = \"salmon-env\" )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_pre_processing.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Isoformic - Pre-Processing","text":"","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.0 (2024-04-24) #>  os       macOS Sonoma 14.1.2 #>  system   aarch64, darwin20 #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2024-06-11 #>  pandoc   3.1.13 @ /opt/homebrew/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package     * version    date (UTC) lib source #>  bslib         0.7.0      2024-03-29 [2] RSPM #>  cachem        1.1.0      2024-05-16 [2] RSPM #>  cli           3.6.2      2023-12-11 [2] RSPM #>  desc          1.4.3      2023-12-10 [2] RSPM #>  digest        0.6.35     2024-03-11 [2] RSPM #>  evaluate      0.23       2023-11-01 [2] RSPM #>  fastmap       1.2.0      2024-05-15 [2] RSPM #>  fs            1.6.4      2024-04-25 [2] RSPM #>  htmltools     0.5.8.1    2024-04-04 [2] RSPM #>  htmlwidgets   1.6.4      2023-12-06 [2] RSPM #>  isoformic   * 0.1.0.9006 2024-06-11 [1] local #>  jquerylib     0.1.4      2021-04-26 [2] RSPM #>  jsonlite      1.8.8      2023-12-04 [2] RSPM #>  knitr         1.47       2024-05-29 [2] CRAN (R 4.4.0) #>  lifecycle     1.0.4      2023-11-07 [2] RSPM #>  magrittr      2.0.3      2022-03-30 [2] RSPM #>  memoise       2.0.1      2021-11-26 [2] RSPM #>  pkgdown       2.0.9      2024-04-18 [2] RSPM #>  purrr         1.0.2      2023-08-10 [2] RSPM #>  R6            2.5.1      2021-08-19 [2] RSPM #>  ragg          1.3.2      2024-05-15 [2] RSPM #>  rlang         1.1.3      2024-01-10 [2] RSPM #>  rmarkdown     2.27       2024-05-17 [2] RSPM #>  sass          0.4.9      2024-03-15 [2] RSPM #>  sessioninfo   1.2.2      2021-12-06 [2] RSPM #>  systemfonts   1.1.0      2024-05-15 [2] RSPM #>  textshaping   0.4.0      2024-05-24 [2] RSPM #>  vctrs         0.6.5      2023-12-01 [2] RSPM #>  xfun          0.44       2024-05-15 [2] RSPM #>  yaml          2.3.8      2023-12-11 [2] RSPM #>  #>  [1] /private/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/Rtmp28DMZh/temp_libpath2f624fd5eade #>  [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_reference_annotation.html","id":"using-tximeta-to-create-linkedtxome","dir":"Articles","previous_headings":"","what":"Using tximeta to create LinkedTxome","title":"Isoformic - Reference Annotation","text":"creating LinkedTxome package tximeta can use FASTA GTF file. case organism databases, everything need GTF file annotation transcripts genes. FASTA file used transcript sequences. Note: even use GENCODE Ensembl, use custom name, like “localGENCODE”, otherwise tximeta try download resources cached versions. isoformic package auxiliary function can help download relevant reference files GENCODE project, Homo sapiens Mus musculus. NOTE:chunk code download approximately 200MB data. run sure need files.","code":"# In this example we are goign to save the files to a temporary directory base_dir <- fs::path_temp(\"isoformic_ref\") base_dir <- fs::path(base_dir, \"gencode_v46\") fs::dir_create(base_dir) # For the GTF file download_reference(   version = \"46\",   reference = \"gencode\",   file_type = \"gtf\",   organism = \"human\",   output_path = base_dir )  # For the transcriptome FASTA file download_reference(   version = \"46\",   reference = \"gencode\",   file_type = \"fasta\",   organism = \"human\",   output_path = base_dir )  # Mouse transcriptome FASTA download_reference(   version = \"M35\",   reference = \"gencode\",   file_type = \"fasta\",   organism = \"mouse\",   output_path = fs::path_temp(isoformic_ref, \"gencode_M35\") ) # fs::dir_create() fs::dir_ls(base_dir) gtf_file_path <- fs::path(base_dir, \"gencode.v46.annotation.gtf.gz\") fasta_file_path <- fs::path(base_dir, \"gencode.v46.transcripts.fa.gz\")  fs::file_exists(gtf_file_path) fs::file_exists(fasta_file_path)  fs::dir_create(base_dir)  fs::dir_exists(\"/var/folders/2q/937_bkg10svdwx1x00prs9nm0000gn/T/RtmpW9sxel/isoformic_ref/gencode_v46\")  json_file_path <- paste0(base_dir, \".json\") fs::file_create(json_file_path)  fs:: tximeta::makeLinkedTxome(   indexDir = base_dir,   source = \"localGENCODE\",   organism = \"Homo sapiens\",   release = \"46\",   genome = \"GRCh38\",   fasta = fasta_file_path,   gtf = gtf_file_path,   write = TRUE,   jsonFile = json_file_path )   tximeta::loadLinkedTxome(\"data-raw/gencode_v33.json\") library(tximeta)  library(macrophage) dir <- system.file(\"extdata\", package = \"macrophage\") fs::dir_ls(dir) tximeta::makeLinkedTxome(   indexDir = file.path(dir, \"gencode.v29_salmon_0.12.0\"),   source = \"localGENCODE\",   organism = \"Homo sapiens\",   release = \"45\",   genome = \"GRCh38\",   fasta = \"ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_29/gencode.v29.transcripts.fa.gz\",   gtf = file.path(dir, \"gencode.v29.annotation.gtf.gz\"), # local version   write = FALSE )"},{"path":"https://luciorq.github.io/isoformic/articles/isoformic_reference_annotation.html","id":"using-custom-gtf-or-gff-files","dir":"Articles","previous_headings":"","what":"Using custom GTF or GFF files","title":"Isoformic - Reference Annotation","text":"","code":"annot_list <- prepare_annotation(\"data-raw/gencode.v46.annotation.gtf.gz\")  annot_list$gene annot_list$transcript annot_list$exon"},{"path":"https://luciorq.github.io/isoformic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucio Rezende Queiroz. Author, maintainer, copyright holder. Lucio Rezende Queiroz. Author, contributor. Izabela Mamede Conceicao. Author, contributor. Luigi Marchionni. Author, contributor. Gloria Franco. Author, contributor.","code":""},{"path":"https://luciorq.github.io/isoformic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Queiroz L, Queiroz L, Conceicao , Marchionni L, Franco G (2025). isoformic: Isoform-Level Biological Interpretation Transcriptomic Data. R package version 0.1.2.9013, https://github.com/luciorq/isoformic.","code":"@Manual{,   title = {isoformic: Isoform-Level Biological Interpretation of Transcriptomic Data},   author = {Lucio Rezende Queiroz and Lucio Rezende Queiroz and Izabela Mamede Conceicao and Luigi Marchionni and Gloria Franco},   year = {2025},   note = {R package version 0.1.2.9013},   url = {https://github.com/luciorq/isoformic}, }"},{"path":"https://luciorq.github.io/isoformic/index.html","id":"isoformic-","dir":"","previous_headings":"","what":"Isoform-Level Biological Interpretation of Transcriptomic Data","title":"Isoform-Level Biological Interpretation of Transcriptomic Data","text":"Welcome isoformic, workflow isoform-level biological interpretation transcriptomic data. workflow uses known annotated transcripts produce biologically relevant results based different types transcripts comparison case versus control transcriptomic data.","code":""},{"path":"https://luciorq.github.io/isoformic/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Isoform-Level Biological Interpretation of Transcriptomic Data","text":"can install development version isoformic GitHub :","code":"install.packages(\"isoformic\", repos = c(\"https://luciorq.r-universe.dev\", getOption(\"repos\"))) if (requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_github(\"luciorq/isoformic\")"},{"path":[]},{"path":"https://luciorq.github.io/isoformic/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Isoform-Level Biological Interpretation of Transcriptomic Data","text":"Performing differential expression analysis isoform level, rather gene level, important gaining detailed understanding gene regulation functional differences biological systems. gene-level analysis provides insights overall expression changes genes, fails capture complex dynamics occurring isoform level. Isoforms, resulting alternative splicing alternative transcription start sites, can possess distinct structural features functional properties. examining isoform-level expression changes, researchers can identify characterize specific isoforms may unique roles cellular processes, isoform-specific protein-protein interactions protein functions. granularity enables accurate interpretation complex biological phenomena, tissue-specific expression patterns, cell differentiation, disease progression. Additionally, isoform-level analysis can help uncover regulatory mechanisms identify potential biomarkers therapeutic targets may missed solely relying gene-level analysis. Therefore, considering isoform-level expression changes provides comprehensive view transcriptional dynamics enhances understanding gene regulation given biological context.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/ContextData.html","id":null,"dir":"Reference","previous_headings":"","what":"ContextData Class — ContextData","title":"ContextData Class — ContextData","text":"ContextData class holds information genomic context transcripts annotation IsoformicExperiment analysis.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/ContextData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ContextData Class — ContextData","text":"","code":"ContextData(   gene_name = character(0),   gff_file = character(0),   txdb = NULL,   annotation_table = NULL,   annotation_name = character(0),   assembly_name = character(0),   ideogram_assembly = character(0),   organism = character(0),   orgdb_package = character(0),   bsgenome_package = character(0),   tx_type_palette = character(0) )"},{"path":"https://luciorq.github.io/isoformic/reference/ContextData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ContextData Class — ContextData","text":"gene_name Character vector gene names print. gff_file Character string specifying path GFF file containing gene annotation. txdb TxDb object containing transcript database. annotation_table data frame containing transcript annotation. annotation_name Character string specifying name annotation (e.g., \"Ensembl_v104\"). assembly_name Character string specifying name genome assembly (e.g., \"GRCh38\"). ideogram_assembly Character string specifying name genome assembly ideogram plotting (e.g., \"hg38\"). organism Character string specifying organism name (e.g., \"Homo sapiens\"). orgdb_package Character string specifying name organism database package (e.g., \"org.Hs.eg.db\"). bsgenome_package Character string specifying name BSgenome package (e.g., \"BSgenome.Hsapiens.UCSC.hg38\"). tx_type_palette Character vector specifying color palette transcript types.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/ContextData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ContextData Class — ContextData","text":"preferred way construct object class create_context_data() function.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/IsoformicExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"IsoformicExperiment Class — IsoformicExperiment","title":"IsoformicExperiment Class — IsoformicExperiment","text":"IsoformicExperiment class encapsulates core data structure transcriptomic analyses isoformic package. holds path dataset, sample metadata, provides access transcript, gene, exon annotations properties. preferred way construct object class IsoformicExperiment() constructor.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/IsoformicExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IsoformicExperiment Class — IsoformicExperiment","text":"","code":"IsoformicExperiment(   experiment_name = NA_character_,   data_path = NULL,   annot_path = NULL,   assay = NULL,   col_data = NULL,   annot_metadata = NULL,   dea = NULL,   gsea = NULL,   tx_type_palette = character(0) )  col_data(self, ...)  annot_data_transcripts(self, ...)  annot_data_genes(self, ...)  annot_data_exons(self, ...)  annot_data(self, ...)  annot_row_names(self, ...)  col_names(self, ...)  row_names(self, ...)  tx_to_gene(self, ...)  tx_annot(self, ...)  de_tx(self, ...)  de_gene(self, ...)"},{"path":"https://luciorq.github.io/isoformic/reference/IsoformicExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IsoformicExperiment Class — IsoformicExperiment","text":"experiment_name Character string specifying name experiment. name used caching assays experiment. name provided random identifier used. data_path Character string specifying path data directory. annot_path Character string specifying path annotation database directory. assay list matrices data frames containing assay data, transcript IDs row names sample IDs column names. element list represents different assay (e.g., TPM, counts). col_data data frame containing sample metadata. First column must sample_id matching column names assays. annot_metadata list containing metadata annotation, source, version, date. dea list containing differential expression analysis results transcripts genes. gsea list containing gene set enrichment analysis results. tx_type_palette named character vector specifying color palette different transcript types. self IsoformicExperiment object. ... Additional arguments passed methods. annot_data_transcripts property retrieves transcript annotation data. annot_data_genes property retrieves gene annotation data. annot_data_exons property retrieves exon annotation data. annot_data property aggregates transcript, gene, exon annotation data.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/as_isoformic.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a SummarizedExperiment to an IsoformicExperiment Object — as_isoformic","title":"Convert a SummarizedExperiment to an IsoformicExperiment Object — as_isoformic","text":"function converts SummarizedExperiment object IsoformicExperiment object. extracts assays, row data, column data, metadata input object uses create new IsoformicExperiment object.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/as_isoformic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a SummarizedExperiment to an IsoformicExperiment Object — as_isoformic","text":"","code":"as_isoformic(se, annot_path, annot_type = c(\"gff\", \"annot_db\"))"},{"path":"https://luciorq.github.io/isoformic/reference/as_isoformic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a SummarizedExperiment to an IsoformicExperiment Object — as_isoformic","text":"se SummarizedExperiment object converted. annot_path Path annotation file. can GFF file path pre-built annotation database created [prepare_isoformic_annotation()].","code":""},{"path":"https://luciorq.github.io/isoformic/reference/check_mae_isoformic_is_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Isoformic mae have a list isoformic slot — check_mae_isoformic_is_list","title":"Check if Isoformic mae have a list isoformic slot — check_mae_isoformic_is_list","text":"Check Isoformic mae list isoformic slot","code":""},{"path":"https://luciorq.github.io/isoformic/reference/check_mae_isoformic_is_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Isoformic mae have a list isoformic slot — check_mae_isoformic_is_list","text":"","code":"check_mae_isoformic_is_list(mae)"},{"path":"https://luciorq.github.io/isoformic/reference/check_mae_isoformic_tx_to_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Isoformic mae have a tx_to_gene — check_mae_isoformic_tx_to_gene","title":"Check if Isoformic mae have a tx_to_gene — check_mae_isoformic_tx_to_gene","text":"Check Isoformic mae tx_to_gene","code":""},{"path":"https://luciorq.github.io/isoformic/reference/check_mae_isoformic_tx_to_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Isoformic mae have a tx_to_gene — check_mae_isoformic_tx_to_gene","text":"","code":"check_mae_isoformic_tx_to_gene(mae)"},{"path":"https://luciorq.github.io/isoformic/reference/check_se_metadata_level_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if content of metadata level slot is a string. — check_se_metadata_level_length","title":"Check if content of metadata level slot is a string. — check_se_metadata_level_length","text":"Check content metadata level slot string.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/check_se_metadata_level_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if content of metadata level slot is a string. — check_se_metadata_level_length","text":"","code":"check_se_metadata_level_length(se)"},{"path":"https://luciorq.github.io/isoformic/reference/check_se_metadata_level_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if content of metadata level slot is a string. — check_se_metadata_level_type","title":"Check if content of metadata level slot is a string. — check_se_metadata_level_type","text":"Check content metadata level slot string.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/check_se_metadata_level_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if content of metadata level slot is a string. — check_se_metadata_level_type","text":"","code":"check_se_metadata_level_type(se)"},{"path":"https://luciorq.github.io/isoformic/reference/convert_to_isoformic_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Transcript-level Expression to Gene-level — convert_to_isoformic_tibble","title":"Summarize Transcript-level Expression to Gene-level — convert_to_isoformic_tibble","text":"function aggregates transcript-level expression data gene-level calculating mean expression transcripts belonging gene.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/convert_to_isoformic_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Transcript-level Expression to Gene-level — convert_to_isoformic_tibble","text":"","code":"convert_to_isoformic_tibble(txi_transcript)"},{"path":"https://luciorq.github.io/isoformic/reference/convert_to_isoformic_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Transcript-level Expression to Gene-level — convert_to_isoformic_tibble","text":"txi_transcript tibble containing transcript-level expression abundances. tx_to_gene data.frame tibble containing transcript--gene mapping information, including transcript_id gene_id columns.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/convert_to_isoformic_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Transcript-level Expression to Gene-level — convert_to_isoformic_tibble","text":"tibble containing gene-level expression abundances.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/create_context_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ContextData Object — create_context_data","title":"Create ContextData Object — create_context_data","text":"function instantiates ContextData object containing information genomic context transcripts. requires GFF file gene annotation constructs TxDb object . function also prepares annotation table updates transcript names TxDb object. ContextData object can used conjunction IsoformicExperiment transcriptomic analyses.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/create_context_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ContextData Object — create_context_data","text":"","code":"create_context_data(   gff_file,   ...,   organism,   orgdb_package,   bsgenome_package,   tx_type_palette = NULL )"},{"path":"https://luciorq.github.io/isoformic/reference/create_context_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ContextData Object — create_context_data","text":"gff_file Character string specifying path GFF file containing gene annotation. ... dots future extensions must empty. organism Character string specifying organism name (e.g., \"Homo sapiens\"). orgdb_package Character string specifying name organism database package (e.g., \"org.Hs.eg.db\"). bsgenome_package Character string specifying name BSgenome package (e.g., \"BSgenome.Hsapiens.UCSC.hg38\"). tx_type_palette Named character vector specifying color palette transcript types.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/create_isoformic_mae_from_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Isoformic Object from SummarizedExperiment — create_isoformic_mae_from_se","title":"Create Isoformic Object from SummarizedExperiment — create_isoformic_mae_from_se","text":"Create Isoformic Object SummarizedExperiment","code":""},{"path":"https://luciorq.github.io/isoformic/reference/create_isoformic_mae_from_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Isoformic Object from SummarizedExperiment — create_isoformic_mae_from_se","text":"","code":"create_isoformic_mae_from_se(se_tx, se_gene, tx_to_gene = NULL)"},{"path":"https://luciorq.github.io/isoformic/reference/create_isoformic_mae_from_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Isoformic Object from SummarizedExperiment — create_isoformic_mae_from_se","text":"se_tx SummarizedExperiment object containing transcript-level differential expression analysis results. se_gene SummarizedExperiment object containing gene-level differential expression analysis results.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Reference Files from GENCODE — download_reference","title":"Download Reference Files from GENCODE — download_reference","text":"Downloads reference annotation files GENCODE database human mouse genomes. Supports downloading GFF, GTF, transcriptome FASTA, genome FASTA files. function handles directory creation checks existing files avoid redundant downloads.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Reference Files from GENCODE — download_reference","text":"","code":"download_reference(   version = \"49\",   reference = \"gencode\",   organism = c(\"human\", \"mouse\"),   file_type = c(\"gff\", \"gtf\", \"fasta\", \"genome_fasta\"),   output_path = \":cache:\",   timeout_limit = 3600,   method = \"auto\" )"},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Reference Files from GENCODE — download_reference","text":"version character string specifying GENCODE release version. mouse references, include letter 'M' version string (e.g., \"M38\"). Default \"49\". reference character string specifying source reference file. Currently, \"gencode\" supported. Default \"gencode\". organism character string specifying organism. Valid options \"human\" \"mouse\". file_type character string specifying type file download. Valid options \"gff\", \"gtf\", \"fasta\" \"genome_fasta\". Defaults \"gff\". Note: \"fasta\" refers transcriptome FASTA file. \"genome_fasta\" refers whole genome sequence FASTA file. output_path character string specifying directory downloaded file saved. Defaults \":cache:\". Cache path defined [isoformic::get_isoformic_cache()] function. timeout_limit numeric value specifying maximum time seconds download complete. argument takes precedence options(\"timeout\"). Defaults 3600 seconds (1 hour). method character string specifying method used utils::download.file(). Defaults \"auto\".","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Reference Files from GENCODE — download_reference","text":"character string full path downloaded file.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Reference Files from GENCODE — download_reference","text":"function constructs appropriate download URL based specified organism, version, file type, downloads file specified output path, user cache default. file already exists output directory, function download return existing file path. function requires internet connection handles timeout settings prevent download interruptions.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download Reference Files from GENCODE — download_reference","text":"Currently, \"gencode\" reference files supported. \"mane\" reference implemented yet.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/download_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Reference Files from GENCODE — download_reference","text":"","code":"if (FALSE) { # \\dontrun{ # Download human GFF file for GENCODE release 49 gff_file <- download_reference(   version = \"49\",   organism = \"human\",   file_type = \"gff\",   output_path = \":cache:\" )  # Download mouse GFF file for GENCODE release M38 gff_file_mouse <- download_reference(   version = \"M38\",   organism = \"mouse\",   file_type = \"gff\",   output_path = \":cache:\" )  # Download human transcriptome FASTA file for GENCODE release 49 fasta_file <- download_reference(   version = \"49\",   organism = \"human\",   file_type = \"fasta\",   output_path = \":cache:\" ) } # }"},{"path":"https://luciorq.github.io/isoformic/reference/get_isoformic_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","title":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","text":"Determines appropriate user cache directory isoformic package based operating system. macOS, avoids using paths spaces follows XDG base directory specification.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/get_isoformic_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","text":"","code":"get_isoformic_cache(..., ext = NULL)"},{"path":"https://luciorq.github.io/isoformic/reference/get_isoformic_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","text":"... Additional path components append cache directory. ext optional file extension (e.g., \"rds\", \"csv\") append final path.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/get_isoformic_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","text":"path character string representing path user cache directory isoformic package.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/get_isoformic_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve System-Dependent Cache Path for Isoformic — get_isoformic_cache","text":"function uses [tools::R_user_dir()] function determine user cache directory.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/is_deg_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","title":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","text":"Adds column transcript-level differential expression table indicating whether transcript originates gene significantly differentially expressed.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/is_deg_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","text":"","code":"is_deg_sig(DegsigVector, DET_table)"},{"path":"https://luciorq.github.io/isoformic/reference/is_deg_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","text":"DegsigVector character vector containing names transcripts significantly differentially expressed genes. DET_table data.frame tibble containing transcript-level differential expression results, including transcript_name column.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/is_deg_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","text":"tibble additional column DEG_sig indicating whether transcript significantly differentially expressed gene (\"YES\" \"\").","code":""},{"path":"https://luciorq.github.io/isoformic/reference/is_deg_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate Transcripts with Differential Gene Expression Significance — is_deg_sig","text":"","code":"# Sample data significant_transcripts <- c(\"transcript1\", \"transcript3\") DET_table <- data.frame(   transcript_name = c(\"transcript1\", \"transcript2\", \"transcript3\", \"transcript4\"),   log2FC = c(2.5, -1.2, 0.8, -0.5),   pvalue = c(0.01, 0.2, 0.03, 0.6) )  # Annotate transcripts with DEG significance DET_table_annotated <- is_deg_sig(DegsigVector = significant_transcripts, DET_table = DET_table)  # View the result print(DET_table_annotated) #>   transcript_name log2FC pvalue DEG_sig #> 1     transcript1    2.5   0.01     YES #> 2     transcript3    0.8   0.03     YES #> 3     transcript2   -1.2   0.20      NO #> 4     transcript4   -0.5   0.60      NO"},{"path":"https://luciorq.github.io/isoformic/reference/isoformic-package.html","id":null,"dir":"Reference","previous_headings":"","what":"isoformic: Isoform-Level Biological Interpretation of Transcriptomic Data — isoformic-package","title":"isoformic: Isoform-Level Biological Interpretation of Transcriptomic Data — isoformic-package","text":"Isoform-level biological interpretation transcriptomic data.","code":""},{"path":[]},{"path":"https://luciorq.github.io/isoformic/reference/isoformic-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"isoformic: Isoform-Level Biological Interpretation of Transcriptomic Data — isoformic-package","text":"Maintainer: Lucio Rezende Queiroz luciorqueiroz@gmail.com (ORCID) [copyright holder] Authors: Lucio Rezende Queiroz lrq4001@med.cornell.edu [contributor] Izabela Mamede Conceicao iza.mamede@gmail.com (ORCID) [contributor] Luigi Marchionni lum4003@med.cornell.edu (ORCID) [contributor] Gloria Franco gfranco@ufmg.br (ORCID) [contributor]","code":""},{"path":"https://luciorq.github.io/isoformic/reference/join_DEG_DET.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","title":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","text":"Combines gene-level transcript-level differential expression results single table, annotates combined data significance labels based specified cutoffs, filters transcripts based types.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/join_DEG_DET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","text":"","code":"join_DEG_DET(DEG_tab, DET_final_tab, logfc_cut, pval_cut)"},{"path":"https://luciorq.github.io/isoformic/reference/join_DEG_DET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","text":"DEG_tab data.frame tibble containing gene-level differential expression results, including gene_id, gene_name, log2FC, pvalue columns. DET_final_tab data.frame tibble containing transcript-level differential expression results, including transcript_id, transcript_name, transcript_type, log2FC, pvalue columns. logfc_cut numeric value specifying absolute log2 fold-change cutoff significance. pval_cut numeric value specifying p-value cutoff significance.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/join_DEG_DET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","text":"tibble combining gene transcript differential expression results, additional columns: id: gene transcript ID. name: gene transcript name. transcript_type: type transcript \"gene\" gene-level entries. abs_log2FC: absolute value log2 fold-change. significance: \"sig\" significant based cutoffs, \"not_sig\" otherwise.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/join_DEG_DET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Gene and Transcript Level Differential Expression Tables — join_DEG_DET","text":"","code":"# Sample gene-level data DEG_tab <- data.frame(   gene_id = c(\"gene1\", \"gene2\"),   gene_name = c(\"GeneA\", \"GeneB\"),   log2FC = c(1.5, -2.0),   pvalue = c(0.01, 0.04) )  # Sample transcript-level data DET_final_tab <- data.frame(   transcript_id = c(\"tx1\", \"tx2\", \"tx3\"),   transcript_name = c(\"Transcript1\", \"Transcript2\", \"Transcript3\"),   transcript_type = c(\"protein_coding\", \"lncRNA\", \"processed_transcript\"),   log2FC = c(1.2, -1.8, 0.5),   pvalue = c(0.02, 0.03, 0.2) )  # Merge and annotate differential expression results DEGs_DETs_table <- join_DEG_DET(   DEG_tab = DEG_tab,   DET_final_tab = DET_final_tab,   logfc_cut = 1,   pval_cut = 0.05 )  # View the result print(DEGs_DETs_table) #>   feature_id feature_name log2FC pvalue         feature_type significance is_de #> 1      gene1        GeneA    1.5   0.01                 gene          sig   yes #> 2      gene2        GeneB   -2.0   0.04                 gene          sig   yes #> 3        tx1  Transcript1    1.2   0.02       protein_coding          sig   yes #> 4        tx2  Transcript2   -1.8   0.03               lncRNA          sig   yes #> 5        tx3  Transcript3    0.5   0.20 processed_transcript      not_sig    no"},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"Extracts transcript--gene mapping table GENCODE annotation files, transcriptome FASTA file. Currently, FASTA files supported.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"","code":"make_tx_to_gene(file_path, file_type = c(\"fasta\", \"gff\", \"gtf\"))"},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"file_path character string specifying path reference file (e.g., GENCODE FASTA file). file_type character string specifying type reference file. Currently, \"fasta\" supported. Default \"fasta\".","code":""},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"tibble containing transcript--gene mapping information, including transcript IDs, gene IDs, transcript names, gene names, transcript types.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"function reads headers FASTA file extracts relevant information create mapping table. GTF GFF3 files, support yet implemented.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/make_tx_to_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Transcript-to-Gene Relationship Table — make_tx_to_gene","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have downloaded the GENCODE transcriptome FASTA file: fasta_file <- download_reference(   version = \"43\",   organism = \"human\",   file_type = \"fasta\",   output_path = \"data-raw\" )  # Create the transcript-to-gene mapping table tx_to_gene <- make_tx_to_gene(file_path = fasta_file, file_type = \"fasta\")  # View the first few rows utils::head(tx_to_gene) } # }"},{"path":"https://luciorq.github.io/isoformic/reference/modify_lnc_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit the lncRNA start and end table Table of lncRNA starts and ends plus a value to add — modify_lnc_ranges","title":"Edit the lncRNA start and end table Table of lncRNA starts and ends plus a value to add — modify_lnc_ranges","text":"Edit lncRNA start end table Table lncRNA starts ends plus value add","code":""},{"path":"https://luciorq.github.io/isoformic/reference/modify_lnc_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit the lncRNA start and end table Table of lncRNA starts and ends plus a value to add — modify_lnc_ranges","text":"","code":"modify_lnc_ranges(lncRNA_start_end, value_to_add)"},{"path":"https://luciorq.github.io/isoformic/reference/modify_lnc_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit the lncRNA start and end table Table of lncRNA starts and ends plus a value to add — modify_lnc_ranges","text":"lncRNA_start_end Genomic position lncRNA annotation Starts. value_to_add Value add lncRNA annotation.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_genomic_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Transcripts Genomic Context — plot_genomic_context","title":"Plot Transcripts Genomic Context — plot_genomic_context","text":"Generate genomic context plot specified gene, displaying transcripts along types annotations. function utilizes plotgardener package create detailed visualization genomic context, including ideogram, chromosome highlight, transcript structures. requires ContextData object contains necessary genomic information annotations. plot can customized various parameters offsets, label limits, ideogram references.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_genomic_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Transcripts Genomic Context — plot_genomic_context","text":"","code":"plot_genomic_context(   gene_name,   context_data,   limit_label = TRUE,   show_guides = FALSE,   y_offset = 0,   height_offset = 0,   downstream_offset = 0,   upstream_offset = 0,   ideogram_reference = c(\"hg38\", \"hg19\", \"mm11\", \"mm10\", \"none\") )"},{"path":"https://luciorq.github.io/isoformic/reference/plot_genomic_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Transcripts Genomic Context — plot_genomic_context","text":"gene_name Character string specifying name gene plot. context_data ContextData object containing genomic context information. limit_label Logical indicating whether limit length transcript labels avoid overlap (default TRUE). show_guides Logical indicating whether show guide lines plot (default FALSE). y_offset Numeric value adjust vertical position plot (default 0). height_offset Numeric value adjust height plot (default 0). downstream_offset Numeric value extend downstream region beyond gene's end position (default 0). upstream_offset Numeric value extend upstream region beyond gene's start position (default 0). ideogram_reference Character string specifying reference genome ideogram. Options include \"hg38\", \"hg19\", \"mm11\", \"mm10\", \"none\" (default \"hg38\").","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_genomic_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Transcripts Genomic Context — plot_genomic_context","text":"plotgardener object representing genomic context plot.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"Creates bar plot log2 fold-change values transcripts selected gene, differentiating transcript types significance levels.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"","code":"plot_log2FC(   de_data,   feature,   feature_column = \"gene_name\",   color_palette = NULL )"},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"de_data data.frame tibble containing combined gene transcript differential expression results. contain columns log2 fold-change, transcript type, significance, feature symbols. feature character string specifying gene name plot. feature_column character string specifying column name de_data contains gene names. Default \"gene_name\". color_palette named character vector specifying colors different transcript types. NULL, default palette used.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"ggplot2 object representing bar plot.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"function filters input table selected gene creates bar plot log2 fold-change values. transcripts significant, plots without adjusting alpha transparency; otherwise, adjusts alpha based significance. function uses predefined colors transcript types, can overridden providing custom_colors.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_log2FC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Log2 Fold-Change Results for Transcripts of Selected Genes — plot_log2FC","text":"","code":"# Sample data de_table_long <- data.frame(   feature_name = c(\"Transcript1\", \"Transcript2\", \"Transcript3\", \"GeneA\"),   feature_id = c(\"TX1\", \"TX2\", \"TX3\", \"GENEA\"),   gene_name = c(\"GeneA\", \"GeneA\", \"GeneA\", \"GeneA\"),   log2FC = c(1.5, -0.5, -2.0, 0.8),   feature_type = c(\"protein_coding\", \"lncRNA\", \"retained_intron\", \"gene\"),   is_de = c(\"yes\", \"no\", \"yes\", \"yes\") )  # Plot log2 fold-change for the selected gene plot_obj <- plot_log2FC(   de_data = de_table_long,   feature = \"GeneA\",   feature_column = \"gene_name\" )  # Display the plot print(plot_obj)"},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Transcript Genomic Context — plot_tx_context","title":"Plot Transcript Genomic Context — plot_tx_context","text":"function plots genomic context transcripts given genes.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Transcript Genomic Context — plot_tx_context","text":"","code":"plot_tx_context(exon_table, custom_colors = NULL)"},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Transcript Genomic Context — plot_tx_context","text":"exon_table tibble exon information. Must contain columns tx_id, exon_left, exon_right. custom_colors vector colors use transcript. provided, function use default colors. Actually, argument *implemented yet.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Transcript per gene expression — plot_tx_expr","title":"Plot Transcript per gene expression — plot_tx_expr","text":"Plot Transcript per gene expression","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Transcript per gene expression — plot_tx_expr","text":"","code":"plot_tx_expr(genes_to_plot, profile_data)"},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Transcript per gene expression — plot_tx_expr","text":"genes_to_plot character vector gene names profile_data tibble output prepare_profile_data","code":""},{"path":"https://luciorq.github.io/isoformic/reference/plot_tx_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Transcript per gene expression — plot_tx_expr","text":"ggplot object","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Annotation — prepare_annotation","title":"Prepare Annotation — prepare_annotation","text":"Prepare annotation imported rowRanges rowData Genes, Transcripts Exons based Position Annotation Table. GTF GFF3 annotation file.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Annotation — prepare_annotation","text":"","code":"prepare_annotation(file_path, file_type = c(\"gtf\", \"gff\"))"},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Annotation — prepare_annotation","text":"file_path Path annotation file. file_type Character indicating type file download. One \"gtf\" \"gff\". Defaults \"gtf\".","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Parquet File from GFF — prepare_annotation_db","title":"Write Parquet File from GFF — prepare_annotation_db","text":"function reads GFF file writes contents Parquet file using DuckDB.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Parquet File from GFF — prepare_annotation_db","text":"","code":"prepare_annotation_db(input_path, output_path = NULL, file_type = c(\"gff\"))"},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Parquet File from GFF — prepare_annotation_db","text":"input_path Character string specifying path input GFF file. output_path Character string specifying path output Parquet file. NULL empty string, temporary file created. file_type Character string specifying type input file. Currently, \"gff\" supported (default \"gff\").","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_annotation_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Parquet File from GFF — prepare_annotation_db","text":"Invisible path created Parquet file.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_exon_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Exon based Position Annotation Table — prepare_exon_annotation","title":"Prepare Exon based Position Annotation Table — prepare_exon_annotation","text":"Prepare Exon based Position Annotation Table","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_exon_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Exon based Position Annotation Table — prepare_exon_annotation","text":"","code":"prepare_exon_annotation(gene_name, file_path, file_type = c(\"gff\", \"gtf\"))"},{"path":"https://luciorq.github.io/isoformic/reference/prepare_exon_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Exon based Position Annotation Table — prepare_exon_annotation","text":"gene_name String vector gene names extract. file_path Path annotation file. file_type character string specifying type file download. Valid options \"gff\", \"gtf\", \"fasta\" \"genome_fasta\". Defaults \"gff\". Note: \"fasta\" refers transcriptome FASTA file. \"genome_fasta\" refers whole genome sequence FASTA file.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_isoformic_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Feature Annotation to Parquet Files — prepare_isoformic_annotation","title":"Write Feature Annotation to Parquet Files — prepare_isoformic_annotation","text":"function reads annotation file parse feature annotation Parquet files level required feature (.e. gene, transcript, exon).","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_isoformic_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Feature Annotation to Parquet Files — prepare_isoformic_annotation","text":"","code":"prepare_isoformic_annotation(   input_path,   output_path = NULL,   file_type = c(\"gff\") )"},{"path":"https://luciorq.github.io/isoformic/reference/prepare_isoformic_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Feature Annotation to Parquet Files — prepare_isoformic_annotation","text":"input_path Character string specifying path input GFF file. output_path Character string specifying path output directory Parquet files written. NULL empty string, cache directory used. file_type Character string specifying type input file. Currently, \"gff\" supported (default \"gff\").","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_isoformic_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Feature Annotation to Parquet Files — prepare_isoformic_annotation","text":"Invisible path created Parquet file.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"function processes gene transcript-level expression data, along differential expression results, prepare tidy data frame suitable plotting expression profiles across different sample groups.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"","code":"prepare_profile_data(   txi_gene = NULL,   txi_transcript,   sample_metadata,   tx_to_gene,   de_result_gene,   de_result_transcript,   var,   var_levels,   gene_col = \"gene_name\",   tx_col = \"transcript_name\",   pvalue_cutoff = 0.05,   lfc_cutoff = 1,   use_fdr = TRUE )"},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"txi_gene tibble tximport output containing gene-level expression abundances. NULL, gene-level abundances summarized txi_transcript. Default NULL. txi_transcript tibble tximport output containing transcript-level expression abundances. sample_metadata data.frame tibble containing sample metadata. first column contain sample names matching column names txi_gene txi_transcript. tx_to_gene data.frame tibble containing transcript--gene mapping information. Must include columns specified gene_col tx_col. de_result_gene data.frame tibble containing differential expression results gene level. Must include gene_name, log2FC, qvalue columns. de_result_transcript data.frame tibble containing differential expression results transcript level. Must include transcript_name, log2FC, qvalue columns. var string specifying column name sample_metadata indicates grouping variable (e.g., treatment, condition). var_levels character vector specifying levels var include contrasts. gene_col string specifying column name tx_to_gene contains gene names. Default \"gene_name\". tx_col string specifying column name tx_to_gene contains transcript names. Default \"transcript_name\". pvalue_cutoff numeric value specifying p-value cutoff determining significant differential expression. Default 0.05. lfc_cutoff numeric value specifying log2 fold-change cutoff determining significant differential expression. Default 1. use_fdr logical value indicating whether use false discovery rate (qvalue) instead p-value significance cutoff. Default TRUE.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"tibble containing processed expression data differential expression flags, ready plotting.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"function combines gene transcript expression data differential expression results generate tidy data frame. filters significant genes transcripts based specified cutoffs prepares data plotting expression profiles across specified sample groups.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/prepare_profile_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Data for Gene and Transcript Expression Profile Plot — prepare_profile_data","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming txi_gene, txi_transcript, sample_metadata, tx_to_gene, de_result_gene, # and de_result_transcript are pre-loaded data frames:  # Prepare data for plotting expr_df <- prepare_profile_data(   txi_gene = txi_gene,   txi_transcript = txi_transcript,   sample_metadata = sample_metadata,   tx_to_gene = tx_to_gene,   de_result_gene = de_result_gene,   de_result_transcript = de_result_transcript,   var = \"condition\",   var_levels = c(\"control\", \"treatment\"),   gene_col = \"gene_name\",   tx_col = \"transcript_name\",   pvalue_cutoff = 0.05,   lfc_cutoff = 1,   use_fdr = TRUE )  # View the prepared data utils::head(expr_df)  # Plotting example (assuming ggplot2 is installed) library(ggplot2) ggplot(expr_df, aes(x = condition, y = mean_TPM, fill = DE)) +   geom_bar(stat = \"identity\", position = position_dodge()) +   facet_wrap(~ parent_gene + transcript_type) } # }"},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"Performs gene set enrichment analysis (GSEA) differential expression results various transcript types, using fgsea package. function iterates specified transcript types, filters data accordingly, runs GSEA type.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"","code":"run_enrichment(   det_df,   genesets_list,   tx_to_gene,   pval_cutoff = 0.05,   lfc_cutoff = 1 )"},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"det_df data.frame tibble containing transcript-level differential expression results, including transcript_type, log2FC, gene_name columns. genesets_list list gene sets used enrichment analysis. tx_to_gene data.frame tibble mapping transcript names gene names, including transcript_name gene_name columns. pval_cutoff numeric value specifying p-value cutoff enrichment results. Default 0.05. lfc_cutoff numeric value specifying log2 fold-change cutoff filtering transcripts. Default 1.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"tibble containing enrichment analysis results transcript type, including pathway names, p-values, adjusted p-values, transcript type (experiment).","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"function defines list transcript types corresponding labels. filters input differential expression data transcript type, ranks genes log2 fold-change, performs GSEA using fgsea package.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Gene Set Enrichment Analysis for Different Transcript Types — run_enrichment","text":"","code":"# Sample differential expression data det_df <- data.frame(   gene_name = c(     \"GeneA\", \"GeneB\", \"GeneC\", \"GeneD\",     \"GeneA\", \"GeneA\", \"GeneB\", \"GeneC\",     \"GeneD\", \"GeneE\", \"GeneB\", \"GeneA\"   ),   transcript_type = c(     \"protein_coding\", \"retained_intron\",     \"protein_coding_CDS_not_defined\", \"processed_transcript\",     \"protein_coding\", \"protein_coding\",     \"retained_intron\", \"protein_coding_CDS_not_defined\",     \"processed_transcript\", \"nonsense_mediated_decay\",     \"protein_coding\", \"retained_intron\"   ),   transcript_name = c(     \"Transcript1\", \"Transcript2\",     \"Transcript3\", \"Transcript4\",     \"Transcript5\", \"Transcript6\",     \"Transcript7\", \"Transcript8\",     \"Transcript9\", \"Transcript10\",     \"Transcript11\", \"Transcript12\"   ),   log2FC = c(     1.5, -2.0, 0.8, -1.2, 2.3, -0.5,     1.0, -1.5, 0.3, -2.5, 1.8, -0.7   ) )  # Sample gene sets genesets_list <- list(   Pathway1 = c(\"GeneA\", \"GeneC\", \"GeneF\"),   Pathway2 = c(\"GeneB\", \"GeneD\", \"GeneE\", \"GeneX\") )  # Sample transcript to gene mapping tx_to_gene <- data.frame(   transcript_name = det_df$transcript_name,   gene_name = det_df$gene_name )  # Run enrichment analysis fgsea_results_df <- run_enrichment(   det_df = det_df,   genesets_list = genesets_list,   tx_to_gene = tx_to_gene,   pval_cutoff = 0.05,   lfc_cutoff = 1 )  # View the results print(fgsea_results_df) #> Empty data.table (0 rows and 9 cols): pathway,pval,padj,log2err,ES,NES..."},{"path":"https://luciorq.github.io/isoformic/reference/run_swish_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Swish Differential Expression — run_swish_pairwise","title":"Run Swish Differential Expression — run_swish_pairwise","text":"Run swish method SummarizedExperiment inferential replicates.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_swish_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Swish Differential Expression — run_swish_pairwise","text":"","code":"run_swish_pairwise(se, contrast_var = \"condition\", ...)"},{"path":"https://luciorq.github.io/isoformic/reference/run_swish_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Swish Differential Expression — run_swish_pairwise","text":"se SummarizedExperiment object. contrast_var column name colData(se). ... Additional arguments passed fishpond::swish().","code":""},{"path":"https://luciorq.github.io/isoformic/reference/run_swish_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Swish Differential Expression — run_swish_pairwise","text":"SummarizedExperiment object.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/se_experiment_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Return SummarizedExperiment Experiment Level — se_experiment_level","title":"Return SummarizedExperiment Experiment Level — se_experiment_level","text":"Check level quantification ","code":""},{"path":"https://luciorq.github.io/isoformic/reference/se_experiment_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return SummarizedExperiment Experiment Level — se_experiment_level","text":"","code":"se_experiment_level(se)"},{"path":"https://luciorq.github.io/isoformic/reference/se_experiment_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return SummarizedExperiment Experiment Level — se_experiment_level","text":"se object class SummarizedExperiment. type String containing one c(\"txp\", \"gene\").","code":""},{"path":"https://luciorq.github.io/isoformic/reference/tx_type_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcript Type Color Palette — tx_type_palette","title":"Transcript Type Color Palette — tx_type_palette","text":"Default color palette transcript types.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/tx_type_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcript Type Color Palette — tx_type_palette","text":"","code":"tx_type_palette()"},{"path":"https://luciorq.github.io/isoformic/reference/validate_isoformic_mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Isoformic Object — validate_isoformic_mae","title":"Validate Isoformic Object — validate_isoformic_mae","text":"Validate MultiAssayExperiment object compatible {isoformic}. Also, validates {isoformic} preparation steps executed object.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/validate_isoformic_mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Isoformic Object — validate_isoformic_mae","text":"","code":"validate_isoformic_mae(mae)"},{"path":"https://luciorq.github.io/isoformic/reference/validate_isoformic_mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Isoformic Object — validate_isoformic_mae","text":"mae MultiAssayExperiment object validated.","code":""},{"path":"https://luciorq.github.io/isoformic/reference/validate_isoformic_mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Isoformic Object — validate_isoformic_mae","text":"MultiAssayExperiment object valid {isoformic} slots.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"isoformic-013-development-version","dir":"Changelog","previous_headings":"","what":"Isoformic 0.1.3 (Development Version)","title":"Isoformic 0.1.3 (Development Version)","text":"Release Date: Unreleased Development Changelog: dev","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"added-0-1-3","dir":"Changelog","previous_headings":"","what":"Added","title":"Isoformic 0.1.3 (Development Version)","text":"New output_path = \":cache:\" store downloaded reference files dedicated cache folder. new default behavior download_reference(). New get_isoformic_cache() function retrieve path cache folder. New IsoformicExperiment class encapsulate workflow inputs disk-based backend tidy interface. New generics methods IsoformicExperiment class: col_data() - Retrieve Sample Metadata row_data() - Retrieve Metadata Transcripts Assay Data annot_data() - Retrieve Aggregated Annotation Data (transcript-centric) annot_data_transcripts() - Retrieve Transcript Annotation Data annot_data_genes() - Retrieve Gene Annotation Data annot_data_exons() - Retrieve Exon Annotation Data tx_to_gene() - Retrieve Transcript Gene Mapping Annotation summarize_to_gene() - Summarize Transcript-level Expression Gene-level de_tx() - Retrieve Differential Expression Results Transcripts de_gene() - Retrieve Differential Expression Results Genes New interface plot_log2fc() function visualize log2 fold changes transcripts within gene. New feature_column argument plot_log2FC() specify column name DE results table contains feature names (e.g., gene transcript names). New file_type = \"genome_fasta\" option download_reference() download genome FASTA file GENCODE.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"changed-0-1-3","dir":"Changelog","previous_headings":"","what":"Changed","title":"Isoformic 0.1.3 (Development Version)","text":"Argument file_type download_reference() now \"gff\" default. Default GENCODE version download_reference() now \"49\" default. Argument output_path download_reference() now \":cache:\". Arguments DEG_DET_table selected_genes plot_log2FC() now de_data feature.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"isoformic-012","dir":"Changelog","previous_headings":"","what":"Isoformic 0.1.2","title":"Isoformic 0.1.2","text":"Release Date: 2025-10-06 Development Changelog: 0.1.2","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"added-0-1-2","dir":"Changelog","previous_headings":"","what":"Added","title":"Isoformic 0.1.2","text":"New DuckDB based parse_annotation(). New plot_genomic_context() function visualize genomic context gene transcripts. New tx_type_palette() function provide default color palette transcript types.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"fixed-0-1-2","dir":"Changelog","previous_headings":"","what":"Fixed","title":"Isoformic 0.1.2","text":"make_tx_to_gene() output, wrong column name entrez_id replaced tx_length.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"isoformic-011","dir":"Changelog","previous_headings":"","what":"Isoformic 0.1.1","title":"Isoformic 0.1.1","text":"Release Date: 2024-06-18 Development Changelog: 0.1.1","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"added-0-1-1","dir":"Changelog","previous_headings":"","what":"Added","title":"Isoformic 0.1.1","text":"download_reference(): now supports organism = c(\"human\", \"mouse\"), organism = \"human\" default. download_reference(): argument file_type = \"gtf\" default. prepare_annotation(): Parse GTF GFF file formats required annotation data.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"fixed-0-1-1","dir":"Changelog","previous_headings":"","what":"Fixed","title":"Isoformic 0.1.1","text":"prepare_profile_data(): accepts matrix data.frame input txi_transcript argument.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"isoformic-010","dir":"Changelog","previous_headings":"","what":"Isoformic 0.1.0","title":"Isoformic 0.1.0","text":"Release Date: 2024-06-11 Development Changelog: 0.1.0","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"added-0-1-0","dir":"Changelog","previous_headings":"","what":"Added","title":"Isoformic 0.1.0","text":"Release initial workflow.","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"isoformic-001","dir":"Changelog","previous_headings":"","what":"Isoformic 0.0.1","title":"Isoformic 0.0.1","text":"Release Date: 2024-06-08 Development Changelog: 0.0.1","code":""},{"path":"https://luciorq.github.io/isoformic/news/index.html","id":"added-0-0-1","dir":"Changelog","previous_headings":"","what":"Added","title":"Isoformic 0.0.1","text":"Original workflow style code added.","code":""}]
